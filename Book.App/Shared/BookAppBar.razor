@implements IDisposable

<MudAppBar Elevation="1" Dense="true" Class="pa-0">
    <MudIconButton Class="pa-0" Edge="Edge.Start" OnClick="Back" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Info" title="@backText" />
    <MudSpacer />
    <TransactionBtn IsIcon="false" TransactionId="0" Icon="@Icons.Material.Filled.AddCircleOutline" />
    <MudSpacer />
    <MudIconButton Class="pa-0" Edge="Edge.End" OnClick="ToggleThemeMode" Icon="@themeIcon" Color="@themeColor" title="@themeText" />
</MudAppBar>

@code
{
    [Inject] public NavigationManager NavigationManager { get; set; } = default!;

    [Inject] public INotifierSvc NotifierSvc { get; set; } = default!;

    [Inject] internal IBookSettingSvc BookSettingSvc { get; set; } = default!;

    [Inject] public PageParamsSvc PageParamsSvc { get; set; } = default!;

    List<string> locations { get; set; } = new List<string> { "/" };

    string backText = string.Empty;

    bool isDarkMode = true;
    string themeIcon = Icons.Material.Filled.LightMode;
    string themeText = string.Empty;
    Color themeColor = Color.Warning;

    protected async override Task OnInitializedAsync()
    {
        themeText = Localizer["LightMode"];
        isDarkMode = await BookSettingSvc.GetDarkMode();

        SetTheme();
        SetBackText();

        NavigationManager.LocationChanged += LocationChanged;
    }

    async void ToggleThemeMode()
    {
        isDarkMode = !isDarkMode;
        SetTheme();

        await BookSettingSvc.SetDarkMode(isDarkMode);
        NotifierSvc.OnThemeChanged(this, isDarkMode);
    }

    void SetTheme()
    {
        themeIcon = isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode;
        themeText = isDarkMode ? Localizer["LightMode"] : Localizer["DarkMode"];
        themeColor = isDarkMode ? Color.Warning : Color.Dark;
    }

    void Back()
    {
        if (locations.Count > 1)
        {
            NavigationManager.NavigateTo(locations[^2], false);
            locations.RemoveAt(locations.Count - 1);
        }
        else
        {
            NavigationManager.NavigateTo("/", false);
        }

        locations.RemoveAt(locations.Count - 1);
    }

    void LocationChanged(object? sender, LocationChangedEventArgs args)
    {
        locations.Add(args.Location);
        SetBackText();
    }

    void SetBackText()
    {
        if (locations.Count > 2)
        {
            switch (locations[^2].Split("/").Last().ToLower())
            {
                case "linechart":
                    backText = PageParamsSvc.PageTitle;
                    break;

                case "translist":
                    backText = Localizer["Entries"];
                    break;

                case "summarytypelist":
                    backText = Localizer["Types"];
                    break;

                case "database":
                    backText = Localizer["Database"];
                    break;

                case "booksettings":
                    backText = Localizer["Settings"];
                    break;

                case "info":
                    backText = Localizer["About"];
                    break;

                default:
                    backText = Localizer["Summary"];
                    break;
            }
        }
        else
        {
            backText = Localizer["Summary"];
        }

        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= LocationChanged;
        GC.SuppressFinalize(this);
    }
}
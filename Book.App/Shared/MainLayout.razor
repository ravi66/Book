@inherits LayoutComponentBase

<MudThemeProvider @bind-IsDarkMode="@_isDarkMode" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0" Dense="true" >
        <MudIconButton Class="pa-0" Edge="Edge.Start" OnClick="ToggleDrawer" Icon="@menuIcon" Color="Color.Info" Size="Size.Large" Title="@menuToolTip" />
        <MudIconButton Class="py-0 px-2" OnClick="Navigate" Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Info" Size="Size.Large" Title="@Localizer["GoBack"]" />
        <MudSpacer />
        <TransactionBtn IsIcon="false" TransactionId="0" Icon="@Icons.Material.Filled.AddCircleOutline" />
        <MudSpacer />
        <MudIconButton Class="pa-0" Href="info" Icon="@Icons.Material.Filled.Info" Color="Color.Info" Size="Size.Large" Title="@Localizer["MoreInformation"]" />
        <MudIconButton Class="py-0 ps-1 pe-0" OnClick="ToggleThemeMode" Icon="@themeIcon" Color="@themeColor" Size="Size.Large" Title="@themeText" />
    </MudAppBar>
    <MudDrawer @bind-Open="@drawerOpen" Variant="DrawerVariant.Responsive" Elevation="0">
        <MudDrawerHeader Dense="true" >
            <MudText Typo="Typo.h5" Class="pa-0" Color="Color.Info">@BookName</MudText>
        </MudDrawerHeader>
        <MudNavMenu Color="Color.Success" >
            <MudNavLink Href="Database">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Row="true">
                    <MudIcon Icon="@SvgIcons.Database" />
                    <MudText Typo="Typo.h6">@Localizer["Database"]</MudText>
                </MudStack>
            </MudNavLink>
            <MudNavLink Href="SummaryTypeList">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Row="true" >
                    <MudIcon Icon="@Icons.Material.Filled.Summarize" />
                    <MudText Typo="Typo.h6">@Localizer["Types"]</MudText>
                </MudStack>
            </MudNavLink>
            <MudNavLink Href="BookSettings">
                <MudStack AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Row="true" >
                    <MudIcon Icon="@Icons.Material.Filled.Settings" />
                    <MudText Typo="Typo.h6">@Localizer["Settings"]</MudText>
                </MudStack>
            </MudNavLink>
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-1" >
            <MudScrollToTop>
                <MudFab StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
            </MudScrollToTop>
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code
{
    [Inject] internal IBookSettingSvc BookSettingSvc { get; set; }

    [Inject] public IBookDbMigratorSvc DbMigrator { get; set; }

    [Inject] public NavigationManager NavigationManager { get; set; }

    [Inject] public INotifierSvc NotifierSvc { get; set; }

    [Inject] public PageParamsSvc PageParamsSvc { get; set;  }

    bool _isDarkMode = true;
    string themeIcon = Icons.Material.Filled.LightMode;
    string themeText = string.Empty;
    Color themeColor = Color.Warning;

    string BookName = string.Empty;

    bool drawerOpen = false;
    string menuIcon = @Icons.Material.Filled.Menu;
    string menuToolTip = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        await DbMigrator.EnsureDbCreated();

        BookName = await BookSettingSvc.GetBookName();

        themeText = Localizer["LightMode"];
        menuToolTip = Localizer["OpenMenu"];

        _isDarkMode = await BookSettingSvc.GetDarkMode();
        SetTheme();

        PageParamsSvc.Init();
    }

    void ToggleDrawer()
    {
        drawerOpen = !drawerOpen;
        menuIcon = drawerOpen ? Icons.Material.Filled.MenuOpen : Icons.Material.Filled.Menu;
        menuToolTip = drawerOpen ? Localizer["CloseMenu"] : Localizer["OpenMenu"];
    }

    async void ToggleThemeMode()
    {
        _isDarkMode = !_isDarkMode;
        SetTheme();

        await BookSettingSvc.SetDarkMode(_isDarkMode);
        NotifierSvc.OnThemeChanged(this, _isDarkMode);
    }

    void SetTheme()
    {
        themeIcon = _isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode;
        themeText = _isDarkMode ? Localizer["LightMode"] : Localizer["DarkMode"];
        themeColor = _isDarkMode ? Color.Warning : Color.Dark;
    }

    void Navigate()
    {
        NavigationManager.NavigateTo(PageParamsSvc.NavigateTo, false);
    }
}
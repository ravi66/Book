@implements IDisposable

<MudDialog>

    <DialogContent>

        <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center" Row="true">
            <MudText Typo="Typo.h5">@DialogTitle</MudText>
            <MudSpacer />
            <TransactionBtn IsIcon="true" TransactionId="0" Icon="@Icons.Material.Filled.AddCircleOutline" />
            <MudTooltip Text="Quit" Delay="500" Duration="0" ShowOnFocus="false" >
                <MudIconButton Icon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" OnClick="Close" aria-label="close" />
            </MudTooltip>
        </MudStack>

        <MudTable Class="mt-0" ServerData="@(new Func<TableState, Task<TableData<Transaction>>>(ServerReload))" Dense="true" Hover="true" @ref="table" SortLabel="Sort By" AllowUnsorted="false" Breakpoint="Breakpoint.Sm" >
            <ToolBarContent>
                <MudText >Entries</MudText>
                <MudSpacer />
                <MudTextField Variant="Variant.Outlined" Clearable="true" T="string" ValueChanged="@(e => OnSearch(e))" DisableUnderLine="true" Margin="Margin.Dense" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Small" ></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="type_field" T="Transaction" >Type</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="value_field" T="Transaction" >Value</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel InitialDirection="SortDirection.Descending" SortLabel="date_field" T="Transaction" >Dated</MudTableSortLabel></MudTh>
                <MudTh>Tools</MudTh>
                <MudTh><MudTableSortLabel SortLabel="notes_field" T="Transaction" >Notes</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Type"><MudText>@context.TransactionTypeName</MudText></MudTd>
                <MudTd DataLabel="Value" Class="@GetValueCSS(context.Value)"><MudText>@context.Value.ToString("C2")</MudText></MudTd>
                <MudTd DataLabel="Dated"><MudText>@context.TransactionDate.ToShortDateString()</MudText></MudTd>
                <MudTd DataLabel="Tools">
                    <TransactionBtn IsIcon="true" TransactionId="context.TransactionId" Icon="@Icons.Material.Filled.Edit" />
                    <CopyTransactionBtn Transaction="@context" Variant="@Variant.Text" Size="@Size.Small" />
                    <DeleteTransactionBtn Transaction="@context" Variant="@Variant.Text" Size="@Size.Small" />
                </MudTd>
                <MudTd DataLabel="Notes"><MudText>@context.Notes</MudText></MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No Entries found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading Entries...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 5, 10, 50, int.MaxValue }" HorizontalAlignment="HorizontalAlignment.Center" />
            </PagerContent>
        </MudTable>

    </DialogContent>
    
</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public int Mode { get; set; }

    [Parameter] public string Name { get; set; }

    [Parameter] public string TypesString { get; set; }

    [Parameter] public int Year { get; set; }

    [Parameter] public int Month { get; set; }

    [Parameter] public int TransactionTypeId { get; set; }

    [Parameter] public int SummaryTypeId { get; set; }

    [Inject] internal ITransactionRepository Repo { get; set; }

    [Inject] internal IBookSettingSvc BookSettingSvc { get; set; }

    [Inject] public INotifierSvc NotifierSvc { get; set; }

    [Inject] public ISnackbar Snackbar { get; set; }

    private IEnumerable<Transaction> Transactions { get; set; }

    private IEnumerable<Transaction> pagedData;

    private MudTable<Transaction> table;

    private int totalItems;

    private string searchString = "";

    private List<int> Types { get; set; }

    private string DialogTitle { get; set; } = "Loading Entries...";

    void Close() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        if (Mode < 1 || Mode > 3) Close();

        MudDialog.Options.MaxWidth = MaxWidth.Large;
        MudDialog.Options.FullWidth = true;
        MudDialog.Options.NoHeader = true;

        MudDialog.SetOptions(MudDialog.Options);

        if ((Mode == 1 || Mode == 2) && Name == "Total") Name = "";
        if (Mode == 3) TypesString = string.Empty;

        Types = TypesString != string.Empty ? TypesString.Split(',').Select(int.Parse).ToList() : [];

        NotifierSvc.TransactionsChanged += TransactionsChanged;
    }

    private async Task<TableData<Transaction>> ServerReload(TableState state)
    {
        await Busy();

        Transactions = [];

        switch (Mode)
        {
            case 1:
                Transactions = await Repo.GetTransactionsByTypeMonth(Types, Year, Month);
                break;
            case 2:
                Transactions = await Repo.GetTransactionsBySummary(Types);
                break;
            case 3:
                Transactions = await Repo.GetTransactionsByType(TransactionTypeId);
                break;
            default:
                break;
        }

        totalItems = Transactions.Count();

        Transactions = Transactions.Where(transaction =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (transaction.TransactionTypeName != null && transaction.TransactionTypeName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (transaction.TransactionDate.ToShortDateString().Contains(searchString))
                return true;
            if ($"{transaction.Value}".Contains(searchString))
                return true;
            if (transaction.Notes != null && transaction.Notes.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();

        SetDialogTitle();

        switch (state.SortLabel)
        {
            case "type_field":
                Transactions = Transactions.OrderByDirection(state.SortDirection, t => t.TransactionTypeName);
                break;
            case "value_field":
                Transactions = Transactions.OrderByDirection(state.SortDirection, t => t.Value);
                break;
            case "date_field":
                Transactions = Transactions.OrderByDirection(state.SortDirection, t => t.TransactionDate);
                break;
            case "notes_field":
                Transactions = Transactions.OrderByDirection(state.SortDirection, t => t.Notes);
                break;
            default:
                break;
        }

        pagedData = Transactions.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<Transaction>() { TotalItems = Transactions.Count(), Items = pagedData };
    }

    private async Task Busy()
    {
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
        Snackbar.Add("Loading Entries", Severity.Normal, config =>
        {
            config.Icon = Icons.Material.Outlined.HourglassTop;
            config.ShowCloseIcon = false;
            config.VisibleStateDuration = 1000;
            config.ShowTransitionDuration = 250;
            config.HideTransitionDuration = 250;
        });

        await Task.Delay(300); // need this
    }

    private void SetDialogTitle()
    {
        string entryOrEntries = (Transactions.Count() == 1) ? " Entry " : " Entries ";

        switch (Mode)
        {
            case 1:
                DialogTitle = Month > 0 ? $"{Name} {entryOrEntries} in {new DateTime(2020, Month, 1):MMMM}, {Year}" : DialogTitle = $"{Name} {entryOrEntries} in {Year}";
                break;

            case 2:
                DialogTitle = $"{Name} {entryOrEntries}";
                break;

            case 3:
                DialogTitle = $"{Name} {entryOrEntries}";
                break;
        }

        DialogTitle = $"{Transactions.Count()} {DialogTitle} [{Transactions.Sum(t => t.Value):C}]";

        if (totalItems - Transactions.Count() > 0) DialogTitle = $"{DialogTitle} ({totalItems - Transactions.Count()} Entries filtered)";

        StateHasChanged();
        return;
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }

    private void TransactionsChanged(object? sender, TransactionsChangedEventArgs args)
    {
        // Reload regardless of Year
        table.ReloadServerData();
    }

    private static string GetValueCSS(decimal value)
    {
        return (value <= 0) ? Constants.PositiveValueCssClass : Constants.NegativeValueCssClass;
    }

    public void Dispose()
    {
        NotifierSvc.TransactionsChanged -= TransactionsChanged;
        GC.SuppressFinalize(this);
    }
}

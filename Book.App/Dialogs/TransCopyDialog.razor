<MudDialog>
    <DialogContent>
        <MudPaper Elevation="0" Style="min-height: 75vh;">
            <MudStack AlignItems="AlignItems.Center" Row="true" Class="pa-2">
                <MudText Typo="Typo.h6">@DialogTitle</MudText>
                <MudSpacer />
                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Save" OnClick="HandleSubmit" Title="@Localizer["CreateEntries"]" Size="Size.Small" />
                <MudIconButton Variant="Variant.Filled" Color="Color.Primary" Icon="@Icons.Material.Filled.Cancel" OnClick="Close" Title="@Localizer["Close"]" Size="Size.Small" />
            </MudStack>
            <MudPaper Elevation="5" Class="pa-1">
                <MudGrid>
                    <MudItem>
                        <MudSelect Label="@Localizer["Frequency"]" T="Frequency" Value="SelectedFrequency" AnchorOrigin="Origin.BottomCenter" ValueChanged="@(FrequencyChanged)" Dense="true" Margin="Margin.Dense" Variant="Variant.Outlined">
                            @foreach (var frequency in Frequencies)
                            {
                                <MudSelectItem Value="frequency">@Localizer[frequency.FrequencyName]</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem>
                        <MudDatePicker Label="@Localizer["EndDate"]" Variant="Variant.Outlined" Required="true" RequiredError="@Localizer["EndDateReqd"]" Date="EndDate" Editable="true" Margin="Margin.Dense" DateChanged="EndDateChanged" MaxDate="EndDate" MinDate="MinDate" PickerVariant="PickerVariant.Dialog" />
                    </MudItem>
                </MudGrid>
            </MudPaper>
            <MudTable Items="@NewTransactions" Hover="true" Dense="true" SortLabel="Sort By" Elevation="5" AllowUnsorted="false" Class="mt-0 mb-2 ms-0 me-0 ps-2 pe-2">
                <HeaderContent>
                    <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<Transaction, object>(x=>x.TransactionDate)">@Localizer["Dated"]</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel=@Localizer["Dated"]>
                        @context.TransactionDate.ToShortDateString()
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="() => DeleteTransaction(context.TransactionDate)" Size="Size.Small" Title="@Localizer["DeleteEntry"]" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </DialogContent>
</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public int TransactionToCopyId { get; set; }

    [Inject] public IDialogService DialogService { get; set; }

    [Inject] public INotifierSvc NotifierSvc { get; set; }

    [Inject] internal ITransactionRepository Repo { get; set; }

    [Inject] internal IBookSettingSvc BookSettingSvc { get; set; }

    private Transaction TransactionToCopy { get; set; }

    private IEnumerable<Transaction> NewTransactions { get; set; } = [];

    public record Frequency(int FrequencyID, string FrequencyName);

    private List<Frequency> Frequencies { get; set; } =
        [
            new Frequency(3, "Yearly"),
            new Frequency(2, "Quaterly"),
            new Frequency(5, "Bimonthly"),
            new Frequency(1, "Monthly"),
            new Frequency(4, "Weekly"),
            new Frequency(6, "Daily"),
        ];

    private string DialogTitle { get; set; }

    private Frequency SelectedFrequency { get; set; }

    private DateTime? EndDate { get; set; }

    private DateTime? MinDate { get; set; }

    private DateTime NewDate { get; set; }

    void Close() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        TransactionToCopy = await Repo.GetTransactionById(TransactionToCopyId);
        if (TransactionToCopy.TransactionId == 0 || TransactionToCopy.TransactionTypeId == 0) MudDialog.Cancel();

        MudDialog.Options.NoHeader = true;
        MudDialog.SetOptions(MudDialog.Options);

        SelectedFrequency = Frequencies.First(f => f.FrequencyID == 3);
        EndDate = new DateTime(await BookSettingSvc.GetEndYear(), 12, 31);
        MinDate = new DateTime(await BookSettingSvc.GetStartYear(), 1, 1);

        DialogTitle = Localizer["TransCopyTitle", TransactionToCopy.Value.ToString("C2"), TransactionToCopy.TransactionType.Name];

        await LoadCopiedTransactions();
        StateHasChanged();
    }

    public async void FrequencyChanged(Frequency selectedFrequency)
    {
        SelectedFrequency = selectedFrequency;
        await LoadCopiedTransactions();
        StateHasChanged();
    }

    public async Task EndDateChanged(DateTime? newEndDate)
    {
        EndDate = newEndDate;
        await LoadCopiedTransactions();
        StateHasChanged();
    }

    private async Task LoadCopiedTransactions()
    {
        NewTransactions = [];

        NewDate = TransactionToCopy.TransactionDate;
        SetNewDate();

        while (NewDate <= EndDate)
        {
            NewTransactions = NewTransactions.Append(
                new Transaction
                    {
                        TransactionTypeId = TransactionToCopy.TransactionTypeId,
                        Value = TransactionToCopy.Value,
                        TransactionDate = NewDate,
                        CreateDate = DateTime.Today,
                    }
            );

            SetNewDate();
        }
    }

    protected async Task HandleSubmit()
    {
        if (!NewTransactions.Any()) return;

        var dialog = DialogService.Show<ConfirmDialog>("", new DialogParameters<ConfirmDialog>
            {
                { x => x.AcceptLabel, NewTransactions.Count() > 1 ? Localizer["TransCopyAccLabelM", NewTransactions.Count()] : Localizer["TransCopyAccLabelS"] },
                { x => x.AcceptColour, Color.Primary },
                { x => x.AcceptToolTip, Localizer["CreateEntries"] },
                { x => x.CancelColour, Color.Default },
            });

        if ((await dialog.Result).Canceled) return;

        await Repo.AddTransactions(NewTransactions);

        List<int> years = [];

        foreach (Transaction transaction in NewTransactions)
        {
            if (years.IndexOf(transaction.TransactionDate.Year) == -1) years.Add(transaction.TransactionDate.Year);
        }

        NotifierSvc.OnTransactionsChanged(this, years);

        Close();
    }

    async Task DeleteTransaction(DateTime transDate)
    {
        NewTransactions = NewTransactions.Where(ct => ct.TransactionDate != transDate);

        if (!NewTransactions.Any()) MudDialog.Cancel();
    }

    private void SetNewDate()
    {
        NewDate = SelectedFrequency.FrequencyID switch
        {
            1 => NewDate.AddMonths(1),
            2 => NewDate.AddMonths(3),
            3 => NewDate.AddYears(1),
            4 => NewDate.AddDays(7),
            5 => NewDate.AddMonths(2),
            6 => NewDate.AddDays(1),
            _ => NewDate.AddMonths(1),
        };
    }
}
@implements IDisposable

<MudDialog OnBackdropClick="Close" >
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-2">@DialogTitle</MudText>
        <MudForm Model="@TransactionType" @ref="@form" Validation="@(validator.ValidateValue)" ValidationDelay="0" FieldChanged="FormMod" >
            <MudGrid Spacing="1" Justify="Justify.FlexStart" Class="pa-0" >
                <MudItem xs="12" sm="6" >
                    <MudPaper Elevation="5" >
                        <MudTextField Label="@Localizer["Name"]" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value=TransactionType.Name For="@(() => TransactionType.Name)" Required="true" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" >
                    <MudPaper Elevation="5" >
                        <MudAutocomplete Label="@Localizer["Summary"]" T="SummaryType" Style="width: 100%;" Variant="Variant.Outlined" Margin="Margin.Dense" Dense="true" SearchFunc="@TypeSearch" SelectOnActivation="true" SelectValueOnTab="true" @bind-Value="SelectedSummaryType" ToStringFunc="@(t => t == null ? null : $" {t.Name}")" ReadOnly="@ReadOnlySummary" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" >
                    <MudPaper Elevation="5" >
                        <MudStack AlignItems="AlignItems.Center" Row="true">
                            <MudText Class="ms-2" Align="Align.Start" Typo="Typo.body1">@Localizer["ChartColour"] @randomInd</MudText>
                            <MudIconButton Class="ma-0 pa-1" Icon="@Icons.Material.Filled.ColorLens" Style="@($"color:{TransactionType.ChartColour};")" OnClick="ChangeColour" Title="@Localizer["ChangeColour"]" />
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" >
                    <MudPaper Elevation="5" >
                        <MudText Class="py-1 ps-2">@Localizer["Changed"]: @TransactionType.CreateDate.ToShortDateString()</MudText>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudIconButton Icon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Primary" Title="@Localizer["SaveEntryType"]" OnClick="Save" />
        @if (!TransactionType.TransactionsFound && TransactionType.TransactionTypeId > 0)
        {
            <DeleteTTypeBtn TransactionType="@TransactionType" Size="@Size.Medium" Variant="@Variant.Filled" />
        }
        <MudIconButton Icon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Primary" Title="@Localizer["Close"]" OnClick="Close" />
    </DialogActions>
</MudDialog>

@code 
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public int SavedTransactionTypeId { get; set; }

    [Parameter] public int NewSummaryTypeId { get; set; }

    [Inject] public IDialogService DialogService { get; set; }

    [Inject] internal ISummaryTypeRepository SummaryRepo { get; set; }

    [Inject] internal ITransactionTypeRepository TTypeRepo { get; set; }

    [Inject] public INotifierSvc NotifierSvc { get; set; }

    string DialogTitle { get; set; } = string.Empty;

    TransactionType TransactionType { get; set; } = new TransactionType { CreateDate = DateTime.Now, };

    List<SummaryType> SummaryTypes { get; set; }

    SummaryType SelectedSummaryType { get; set; }

    readonly TransactionTypeValidator validator = new();

    MudForm form;

    bool formHasChanged = false;

    string randomInd = string.Empty;

    bool ReadOnlySummary { get; set; } = false;

    async void Close()
    {
        if (formHasChanged && form is not null && form.IsValid)
        {
            var dialog = DialogService.Show<ConfirmDialog>("", new DialogParameters<ConfirmDialog>
            {
                { x => x.AcceptLabel, Localizer["SaveChanges", TransactionType.Name] },
                { x => x.AcceptColour, Color.Success },
                { x => x.AcceptToolTip, Localizer["SaveClose"] },
                { x => x.CancelLabel, Localizer["Discard"] },
                { x => x.CancelColour, Color.Error },
                { x => x.CancelToolTip, Localizer["DiscardChanges"] },
            });

            if (!(await dialog.Result).Canceled) Save();
        }

        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();

        MudDialog.Options.NoHeader = true;
        MudDialog.SetOptions(MudDialog.Options);

        SummaryTypes = await SummaryRepo.GetAutoCompleteList();

        if (SavedTransactionTypeId == 0)
        {
            TransactionType.SummaryTypeId = NewSummaryTypeId;
            TransactionType.SummaryType = SummaryTypes.FirstOrDefault(s => s.SummaryTypeId == NewSummaryTypeId);
            DialogTitle = Localizer["NewEntryType"];
        }
        else
        {
            TransactionType = await TTypeRepo.GetTransactionTypeById(SavedTransactionTypeId);
            DialogTitle = Localizer["EditEntryType"];

            if (SavedTransactionTypeId == -1) ReadOnlySummary = true;
        }

        SelectedSummaryType = SummaryTypes.FirstOrDefault(s => s.SummaryTypeId == TransactionType.SummaryTypeId);

        if (TransactionType.ChartColour is null) randomInd = Localizer["RandomInd"];

        NotifierSvc.TransactionTypeDeleted += TransactionTypeDeleted;
    }

    async void Save()
    {
        await form.Validate();
        if (!form.IsValid) return;

        TransactionType.SummaryTypeId = SelectedSummaryType.SummaryTypeId;

        switch (SavedTransactionTypeId)
        {
            case 0:
                TransactionType = await TTypeRepo.AddTransactionType(TransactionType);
                SavedTransactionTypeId = TransactionType.TransactionTypeId;
                break;

            default:
                await TTypeRepo.UpdateTransactionType(TransactionType);
                break;
        }

        MudDialog.Close(DialogResult.Ok(true));
    }

    async Task<IEnumerable<SummaryType>> TypeSearch(string searchValue, CancellationToken token)
    {
        await Task.Yield();

        return string.IsNullOrEmpty(searchValue)
            ? (IEnumerable<SummaryType>)SummaryTypes
            : SummaryTypes.Where(s => s.Name.Contains(searchValue, StringComparison.InvariantCultureIgnoreCase));
    }

    void TransactionTypeDeleted(object? sender, int summaryTypeId) => Close();

    async void ChangeColour()
    {
        MudColor chartColour = String.IsNullOrEmpty(TransactionType.ChartColour) ? Utils.RandomColour() : TransactionType.ChartColour;

        var result = await DialogService.Show<ColourDialog>("", new DialogParameters<ColourDialog> { { x => x.Colour, chartColour }, { x => x.Title, $"{TransactionType.Name} {Localizer["Colour"]}" } }).Result;
        if (!result.Canceled)
        {
            TransactionType.ChartColour = result.Data.ToString();
            formHasChanged = true;
            randomInd = string.Empty;
            StateHasChanged();
        }
    }

    void FormMod(FormFieldChangedEventArgs args) => formHasChanged = true;

    public void Dispose()
    {
        NotifierSvc.TransactionTypeDeleted -= TransactionTypeDeleted;
        GC.SuppressFinalize(this);
    }
}
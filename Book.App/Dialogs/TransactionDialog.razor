@implements IDisposable

<MudDialog OnBackdropClick="Close" TitleClass="mb-0 mt-2 py-0" >
    <DialogContent >
        <MudForm Model="@Transaction" @ref="@form" Validation="@(validator.ValidateValue)" ValidationDelay="0" FieldChanged="FormMod" >
            <MudGrid Spacing="1" Justify="Justify.FlexStart" >
                <MudItem xs="12" sm="6" >
                    <MudPaper Elevation="5" Class="my-0" >
                        <MudNumericField Label="@Localizer["Value"]" Variant="Variant.Outlined" Margin="Margin.Dense" HideSpinButtons="true" Format="F2" @bind-Value=Transaction.Value For="@(() => Transaction.Value)" onFocus="this.select()" Required="true"/>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" >
                    <MudPaper Elevation="5" Class="my-0" >
                        <MudDatePicker Variant="Variant.Outlined" Label="@Localizer["Dated"]" RequiredError="@Localizer["EntryMustBeDated"]" PickerVariant="PickerVariant.Dialog" Editable="true" Margin="Margin.Dense" @bind-Date="PickerDate" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudPaper Elevation="5" Class="my-2">
                        <MudAutocomplete 
                            Label="@Localizer["Type"]" 
                            T="TransactionType"
                            Style="width: 100%;" 
                            Variant="Variant.Outlined" 
                            Margin="Margin.Dense"
                            Dense="true" 
                            SearchFunc="@TypeSearch" 
                            SelectOnActivation="true" 
                            SelectValueOnTab="true" 
                            Value="SelectedTransactionType" 
                            ValueChanged= "TTypeChanged"
                            ToStringFunc="@(t => t == null ? null : t.Name )" 
                            DebounceInterval="500" 
                            MaxItems="null"
                            CoerceValue="true"
                            @ref="@tTypeField"
                            
                            />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6">
                    <MudPaper Elevation="5" Class="my-2">
                        <MudTextField Label="@Localizer["Summary"]" ReadOnly="true" Value="@SelectedTransactionType.SummaryType.Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="5" Class="my-2">
                        <MudTextField Label="@Localizer["Notes"]" Variant="Variant.Outlined" @bind-Value="Transaction.Notes" Lines="3" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="5" Class="my-2">
                        <MudText>@Localizer["Changed"]: @Transaction.CreateDate.ToShortDateString()</MudText>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        @if (SavedTransactionId != 0)
        {
            <CopyTransactionBtn Transaction="@Transaction" Variant="@Variant.Filled" Size="@Size.Medium" />
            <DeleteTransactionBtn Transaction="@Transaction" Variant="@Variant.Filled" Size="@Size.Medium" />
        }
        <MudIconButton Icon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Primary" Title="@Localizer["SaveEntry"]" OnClick="Save" />
        <MudIconButton Icon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Primary" Title="@Localizer["Close"]" OnClick="Close" />
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public int SavedTransactionId { get; set; }

    [Inject] public INotifierSvc NotifierSvc { get; set; }

    [Inject] internal ITransactionTypeRepository TTypeRepo { get; set; }

    [Inject] internal ITransactionRepository Repo { get; set; }

    [Inject] internal IBookSettingSvc BookSettingSvc { get; set; }

    [Inject] public IDialogService DialogService { get; set; }

    Transaction Transaction { get; set; } = new Transaction
        {
            Value = 0.00M,
            TransactionTypeId = -1,
            CreateDate = DateTime.Now,
        };

    readonly TransactionValidator validator = new();

    MudForm form;

    bool formHasChanged = false;

    List<TransactionType> TransactionTypes { get; set; }

    TransactionType SelectedTransactionType { get; set; } = new TransactionType
        {
            Name = string.Empty,
            SummaryType = new SummaryType { Name = string.Empty },
        };

    DateTime? PickerDate { get; set; }

    int OriginalYear { get; set; } = 0;

    MudAutocomplete<TransactionType> tTypeField;

    async void Close()
    {
        if (formHasChanged && form is not null && form.IsValid && Transaction.Value != 0)
        {
            var dialog = DialogService.Show<ConfirmDialog>("", new DialogParameters<ConfirmDialog>
            {
                { x => x.AcceptLabel, Localizer["SaveEntryChanges"] },
                { x => x.AcceptColour, Color.Success },
                { x => x.AcceptToolTip, Localizer["SaveClose"] },
                { x => x.CancelLabel, Localizer["Discard"] },
                { x => x.CancelColour, Color.Error },
                { x => x.CancelToolTip, Localizer["DiscardChanges"] },
            });

            if (!(await dialog.Result).Canceled) Save();
        }

        MudDialog.Cancel();
    }

    protected override async Task OnParametersSetAsync()
    {
        MudDialog.Options.NoHeader = false;
        MudDialog.SetOptions(MudDialog.Options);

        TransactionTypes = (await TTypeRepo.GetAllTransactionTypes()).ToList();

        if (SavedTransactionId == 0)
        {
            Transaction.TransactionType = TransactionTypes.FirstOrDefault(tt => tt.TransactionTypeId == -1);

            var maxDate = new DateTime(await BookSettingSvc.GetEndYear(), 12, 31);
            var minDate = new DateTime(await BookSettingSvc.GetStartYear(), 1, 1);

            if (DateTime.Today <= maxDate && DateTime.Today >= minDate)
            {
                Transaction.TransactionDate = DateTime.Today;
            }
            else
            {
                Transaction.TransactionDate = DateTime.Today > maxDate ? maxDate : minDate;
            }
        }
        else
        {
            Transaction = await Repo.GetTransactionById(SavedTransactionId);
            OriginalYear = Transaction.TransactionDate.Year;
        }

        SelectedTransactionType = TransactionTypes.FirstOrDefault(t => t.TransactionTypeId == Transaction.TransactionTypeId);
        PickerDate = Transaction.TransactionDate;

        NotifierSvc.TransactionsChanged += TransactionsChanged;
    }

    async void TTypeChanged(TransactionType transactionType)
    {
        if (transactionType is not null)
        {
            SelectedTransactionType = transactionType;
            return;
        }

        string newName = tTypeField.Text;

        var confDialog = DialogService.Show<ConfirmDialog>("", new DialogParameters<ConfirmDialog>
            {
                { x => x.AcceptLabel, Localizer["CreateNewEntryType"] },
                { x => x.AcceptColour, Color.Success },
                { x => x.CancelColour, Color.Primary },
            });

        if ((await confDialog.Result).Canceled) return;

        var tTypeDialog = DialogService.Show<TTypeDialog>("", new DialogParameters<TTypeDialog>
            {
                { x => x.NewSummaryTypeId, -1 },
                { x => x.NewName, newName },
            });

        if ((await tTypeDialog.Result).Canceled) return;

        SelectedTransactionType = (TransactionType)tTypeDialog.Result.Result.Data;
        TransactionTypes.Add(SelectedTransactionType);
        StateHasChanged();

        return;
    }

    async void Save()
    {
        await form.Validate();
        if (!form.IsValid) return;

        Transaction.TransactionTypeId = SelectedTransactionType.TransactionTypeId;
        Transaction.TransactionDate = (DateTime)(PickerDate is null ? DateTime.Today : PickerDate);

        _ = SavedTransactionId == 0 ? await Repo.AddTransaction(Transaction) : await Repo.UpdateTransaction(Transaction);

        List<int> years = [Transaction.TransactionDate.Year];
        if (OriginalYear != 0 && OriginalYear != Transaction.TransactionDate.Year) years.Add(OriginalYear);

        int summaryTypeId = await TTypeRepo.GetSummaryTypeId(Transaction.TransactionTypeId);
        NotifierSvc.OnTransactionsChanged(this, years, summaryTypeId);

        MudDialog.Close(DialogResult.Ok(true));
    }

    async Task<IEnumerable<TransactionType>> TypeSearch(string searchValue, CancellationToken token)
    {
        await Task.Yield();

        return string.IsNullOrEmpty(searchValue) ? (IEnumerable<TransactionType>)TransactionTypes : TransactionTypes.Where(t => t.Name.Contains(searchValue, StringComparison.InvariantCultureIgnoreCase));
    }

    void FormMod(FormFieldChangedEventArgs args) => formHasChanged = true;

    void TransactionsChanged(object? sender, TransactionsChangedEventArgs args)
    {
        if (sender != this)
        {
            // Wasn't me so must have been a delete!
            Close();
        }
    }

    public void Dispose()
    {
        NotifierSvc.TransactionsChanged -= TransactionsChanged;
        GC.SuppressFinalize(this);
    }
}
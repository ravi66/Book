@implements IDisposable

<MudDialog >
    <DialogContent >
        <MudForm Model="@Transaction" @ref="@form" Validation="@(validator.ValidateValue)" ValidationDelay="0">
            <MudGrid Spacing="1" Justify="Justify.FlexStart" >
                <MudItem xs="12" sm="6" >
                    <MudPaper Elevation="5" Class="mb-2" >
                        <MudNumericField Label="@Localizer["Value"]" Variant="Variant.Outlined" Margin="Margin.Dense" HideSpinButtons="true" Format="F2" @bind-Value=Transaction.Value For="@(() => Transaction.Value)" onFocus="this.select()" Required="true"/>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" >
                    <MudPaper Elevation="5" Class="mb-2" >
                        <MudDatePicker Variant="Variant.Outlined" Label="@Localizer["Dated"]" Required="true" RequiredError="@Localizer["EntryMustBeDated"]" @bind-Date="PickerDate" PickerVariant="PickerVariant.Dialog" Margin="Margin.Dense" Editable="true" MaxDate="MaxDate" MinDate="MinDate" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" >
                    <MudPaper Elevation="5" Class="mb-2" >
                        <MudAutocomplete Label="@Localizer["Type"]" T="TransactionType" Style="width: 100%;" Variant="Variant.Outlined" Margin="Margin.Dense" Dense="true" SearchFunc="@TypeSearch" SelectOnClick="true" SelectValueOnTab="true" @bind-Value="SelectedTransactionType" ToStringFunc="@(t => t == null ? null : $" {t.Name}")" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="6" >
                    <MudPaper Elevation="5" Class="mb-2" >
                        <MudTextField Label="@Localizer["Summary"]" ReadOnly="true" Value="@SelectedTransactionType.SummaryType.Name" Variant="Variant.Outlined" Margin="Margin.Dense" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" >
                    <MudPaper Elevation="5" Class="mb-2" >
                        <MudTextField Label="@Localizer["Notes"]" Variant="Variant.Outlined" @bind-Value="Transaction.Notes" Lines="3" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" >
                    <MudPaper Elevation="5" Class="mb-2" >
                        <MudText>@Localizer["Changed"]: @Transaction.CreateDate.ToShortDateString()</MudText>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        @if (SavedTransactionId != 0)
        {
            <CopyTransactionBtn Transaction="@Transaction" Variant="@Variant.Filled" Size="@Size.Medium" />
            <DeleteTransactionBtn Transaction="@Transaction" Variant="@Variant.Filled" Size="@Size.Medium" />
        }
        <MudIconButton Icon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Primary" Title="@Localizer["SaveEntry"]" OnClick="Save" />
        <MudIconButton Icon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Primary" Title="@Localizer["Close"]" OnClick="Close" />
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public int SavedTransactionId { get; set; }

    [Inject] public INotifierSvc NotifierSvc { get; set; }

    [Inject] internal ITransactionTypeRepository TTypeRepo { get; set; }

    [Inject] internal ITransactionRepository Repo { get; set; }

    [Inject] internal IBookSettingSvc BookSettingSvc { get; set; }

    Transaction Transaction { get; set; } = new Transaction
        {
            Value = 0.00M,
            TransactionTypeId = -1,
            CreateDate = DateTime.Now,
        };

    readonly TransactionValidator validator = new();

    MudForm form;

    List<TransactionType> TransactionTypes { get; set; }

    TransactionType SelectedTransactionType { get; set; } = new TransactionType
        {
            Name = string.Empty,
            SummaryType = new SummaryType { Name = string.Empty },
        };

    DateTime? PickerDate { get; set; }

    DateTime MinDate { get; set; }

    DateTime MaxDate { get; set; }

    int OriginalYear { get; set; } = 0;

    void Close() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();

        MaxDate = new DateTime(await BookSettingSvc.GetEndYear(), 12, 31);
        MinDate = new DateTime(await BookSettingSvc.GetStartYear(), 1, 1);

        TransactionTypes = (await TTypeRepo.GetAllTransactionTypes()).ToList();

        if (SavedTransactionId == 0)
        {
            Transaction.TransactionType = TransactionTypes.FirstOrDefault(tt => tt.TransactionTypeId == -1);

            if (DateTime.Today <= MaxDate && DateTime.Today >= MinDate)
            {
                Transaction.TransactionDate = DateTime.Today;
            }
            else
            {
                Transaction.TransactionDate = DateTime.Today > MaxDate ? MaxDate : MinDate;
            }
        }
        else
        {
            Transaction = await Repo.GetTransactionById(SavedTransactionId);
            OriginalYear = Transaction.TransactionDate.Year;
        }

        SelectedTransactionType = TransactionTypes.FirstOrDefault(t => t.TransactionTypeId == Transaction.TransactionTypeId);
        PickerDate = Transaction.TransactionDate;

        NotifierSvc.TransactionsChanged += TransactionsChanged;
    }

    async void Save()
    {
        await form.Validate();

        if (!form.IsValid) return;

        Transaction.TransactionTypeId = SelectedTransactionType.TransactionTypeId;
        Transaction.TransactionDate = (DateTime)(PickerDate is null ? DateTime.Today : PickerDate);

        _ = SavedTransactionId == 0 ? await Repo.AddTransaction(Transaction) : await Repo.UpdateTransaction(Transaction);

        List<int> years = [Transaction.TransactionDate.Year];
        if (OriginalYear != 0 && OriginalYear != Transaction.TransactionDate.Year) years.Add(OriginalYear);
        NotifierSvc.OnTransactionsChanged(this, years);

        MudDialog.Close(DialogResult.Ok(true));
    }

    async Task<IEnumerable<TransactionType>> TypeSearch(string searchValue)
    {
        await Task.Yield();

        return string.IsNullOrEmpty(searchValue) ? (IEnumerable<TransactionType>)TransactionTypes : TransactionTypes.Where(t => t.Name.Contains(searchValue, StringComparison.InvariantCultureIgnoreCase));
    }

    void TransactionsChanged(object? sender, TransactionsChangedEventArgs args)
    {
        if (sender != this)
        {
            // Wasn't me so must have been a delete!
            Close();
        }
    }

    public void Dispose()
    {
        NotifierSvc.TransactionsChanged -= TransactionsChanged;
        GC.SuppressFinalize(this);
    }
}
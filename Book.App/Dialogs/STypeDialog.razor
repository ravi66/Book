@implements IDisposable

<MudDialog OnBackdropClick="Close" >
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-2" >@DialogTitle</MudText>
        <MudForm Model="@SummaryType" @ref="@form" Validation="@(validator.ValidateValue)" ValidationDelay="0">
            <MudGrid Spacing="1" Justify="Justify.FlexStart" Class="pa-0" >
                <MudItem xs="12" sm="8" >
                    <MudPaper Elevation="5" >
                        <MudTextField Label="@Localizer["Name"]" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="SummaryType.Name" For="@(() => SummaryType.Name)" Required="true" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="4" >
                    <MudPaper Elevation="5" >
                        <MudNumericField Label="@Localizer["Order"]" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="SummaryType.Order" For="@(() => SummaryType.Order)" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="8" >
                    <MudPaper Elevation="5" >
                        <MudStack AlignItems="AlignItems.Center" Row="true">
                            <MudText Class="ms-2" Align="Align.Start" Typo="Typo.body1">@Localizer["ChartColour"] @RandomInd</MudText>
                            <MudIconButton Class="ma-0 pa-1" Icon="@Icons.Material.Filled.Square" Style="@($"color:{SummaryType.ChartColour};")" OnClick="ChangeColour" Title="@Localizer["ChangeColour"]" />
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="4" >
                    <MudPaper Elevation="5" >
                        <MudText Class="py-1 ps-2">@Localizer["Created"]: @SummaryType.CreateDate.ToShortDateString()</MudText>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudIconButton Icon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Primary" Title="@Localizer["SaveSummaryType"]" OnClick="SaveExit" />
        @if (!SummaryType.TransactionTypes.Any() && SummaryType.SummaryTypeId > 0)
        {
            <DeleteSTypeBtn SummaryType="@SummaryType" Size="@Size.Medium" Variant="@Variant.Filled" />
        }
        <MudIconButton Icon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Primary" Title="@Localizer["Close"]" OnClick="Close" />
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public int SavedSummaryTypeId { get; set; }

    [Inject] public IDialogService DialogService { get; set; }

    [Inject] internal ISummaryTypeRepository Repo { get; set; }

    [Inject] public INotifierSvc NotifierSvc { get; set; }

    string DialogTitle { get; set; } = string.Empty;

    SummaryType SummaryType { get; set; } = new SummaryType
        {
            CreateDate = DateTime.Today,
            Order = 0,
        };

    readonly SummaryTypeValidator validator = new();

    MudForm form;

    string RandomInd = string.Empty;

    bool ColourChanged;

    void Close()
    {
        if (ColourChanged)
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            MudDialog.Cancel();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();

        MudDialog.Options.NoHeader = true;
        MudDialog.SetOptions(MudDialog.Options);

        if (SavedSummaryTypeId != 0)
        {
            SummaryType = await Repo.GetSummaryTypeById(SavedSummaryTypeId);
            DialogTitle = Localizer["EditSummaryType"];
        }
        else
        {
            DialogTitle = Localizer["NewSummaryType"];
        }

        if (SummaryType.ChartColour is null) RandomInd = Localizer["RandomInd"];

        NotifierSvc.SummaryTypeDeleted += Close;
    }

    async void SaveExit()
    {
        if (await Save())
        {
            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    async Task<bool> Save()
    {
        await form.Validate();

        if (form.IsValid)
        {
            switch (SavedSummaryTypeId)
            {
                case 0:
                    await Repo.AddSummaryType(SummaryType);
                    break;
                default:
                    await Repo.UpdateSummaryType(SummaryType);
                    break;
            }

            return true;
        }
        else
        {
            return false;
        }
    }

    async void ChangeColour()
    {
        MudColor chartColour = String.IsNullOrEmpty(SummaryType.ChartColour) ? Utils.RandomColour() : SummaryType.ChartColour;

        var result = await DialogService.Show<ColourDialog>($"{SummaryType.Name} {Localizer["Colour"]}", new DialogParameters<ColourDialog> { { x => x.Colour, chartColour } }).Result;
        if (!result.Canceled)
        {
            SummaryType.ChartColour = result.Data.ToString();
            if (await Save()) ColourChanged = true;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        NotifierSvc.SummaryTypeDeleted -= () => Close();
        GC.SuppressFinalize(this);
    }
}
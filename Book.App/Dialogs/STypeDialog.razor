@implements IDisposable

<MudDialog OnBackdropClick="Close" >
    <DialogContent>
        <MudText Typo="Typo.h6" Class="mb-2" >@DialogTitle</MudText>
        <MudForm Model="@SummaryType" @ref="@form" Validation="@(validator.ValidateValue)" ValidationDelay="0" FieldChanged="FormMod" >
            <MudGrid Spacing="1" Justify="Justify.FlexStart" Class="pa-0" >
                <MudItem xs="12" sm="8" >
                    <MudPaper Elevation="5" >
                        <MudTextField Label="@Localizer["Name"]" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="SummaryType.Name" For="@(() => SummaryType.Name)" Required="true" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="4" >
                    <MudPaper Elevation="5" >
                        <MudNumericField Label="@Localizer["Order"]" Variant="Variant.Outlined" Margin="Margin.Dense" @bind-Value="SummaryType.Order" For="@(() => SummaryType.Order)" />
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="8" >
                    <MudPaper Elevation="5" >
                        <MudStack AlignItems="AlignItems.Center" Row="true">
                            <MudText Class="ms-2" Align="Align.Start" Typo="Typo.body1">@Localizer["ChartColour"] @randomInd</MudText>
                            <MudIconButton Class="ma-0 pa-1" Icon="@Icons.Material.Filled.ColorLens" Style="@($"color:{SummaryType.ChartColour};")" OnClick="ChangeColour" title="@Localizer["ChangeColour"]" />
                        </MudStack>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="4" >
                    <MudPaper Elevation="5" >
                        <MudText Class="py-1 ps-2">@Localizer["Changed"]: @SummaryType.CreateDate.ToShortDateString()</MudText>
                    </MudPaper>
                </MudItem>
            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudIconButton Icon="@Icons.Material.Filled.Save" Variant="Variant.Filled" Color="Color.Primary" title="@Localizer["SaveSummaryType"]" OnClick="Save" />
        @if (!SummaryType.TransactionTypes.Any() && SummaryType.SummaryTypeId > 0)
        {
            <DeleteSTypeBtn SummaryType="@SummaryType" Size="@Size.Medium" Variant="@Variant.Filled" />
        }
        <MudIconButton Icon="@Icons.Material.Filled.Cancel" Variant="Variant.Filled" Color="Color.Primary" title="@Localizer["Close"]" OnClick="Close" />
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public int SavedSummaryTypeId { get; set; }

    [Inject] public IDialogService DialogService { get; set; }

    [Inject] internal ISummaryTypeRepository Repo { get; set; }

    [Inject] public INotifierSvc NotifierSvc { get; set; }

    string DialogTitle { get; set; } = string.Empty;

    SummaryType SummaryType { get; set; } = new SummaryType { CreateDate = DateTime.Now, Order = 0, };

    readonly SummaryTypeValidator validator = new();

    MudForm form;

    bool formHasChanged = false;

    string randomInd = string.Empty;

    async void Close()
    {
        if (formHasChanged && form is not null && form.IsValid)
        {
            var dialog = DialogService.Show<ConfirmDialog>("", new DialogParameters<ConfirmDialog>
            {
                { x => x.AcceptLabel, Localizer["SaveChanges", SummaryType.Name] },
                { x => x.AcceptColour, Color.Success },
                { x => x.AcceptToolTip, Localizer["SaveClose"] },
                { x => x.CancelLabel, Localizer["Discard"] },
                { x => x.CancelColour, Color.Error },
                { x => x.CancelToolTip, Localizer["DiscardChanges"] },
            });

            if (!(await dialog.Result).Canceled) Save();
        }

        MudDialog.Cancel();
    }

    protected override async Task OnInitializedAsync()
    {
        await Task.Yield();

        MudDialog.Options.NoHeader = true;
        MudDialog.SetOptions(MudDialog.Options);

        if (SavedSummaryTypeId != 0)
        {
            SummaryType = await Repo.GetSummaryTypeById(SavedSummaryTypeId);
            DialogTitle = Localizer["EditSummaryType"];
        }
        else
        {
            DialogTitle = Localizer["NewSummaryType"];
        }

        if (SummaryType.ChartColour is null) randomInd = Localizer["RandomInd"];

        NotifierSvc.SummaryTypeDeleted += Close;
    }

    async void Save()
    {
        await form.Validate();
        if (!form.IsValid) return;

        switch (SavedSummaryTypeId)
        {
            case 0:
                SummaryType = await Repo.AddSummaryType(SummaryType);
                SavedSummaryTypeId = SummaryType.SummaryTypeId;
                break;

            default:
                await Repo.UpdateSummaryType(SummaryType);
                break;
        }

        MudDialog.Close(DialogResult.Ok(true));
    }

    async void ChangeColour()
    {
        MudColor chartColour = String.IsNullOrEmpty(SummaryType.ChartColour) ? Utils.RandomColour() : SummaryType.ChartColour;

        var result = await DialogService.Show<ColourDialog>("", new DialogParameters<ColourDialog> { { x => x.Colour, chartColour }, { x => x.Title, $"{SummaryType.Name} {Localizer["Colour"]}" } }).Result;
        if (!result.Canceled)
        {
            SummaryType.ChartColour = result.Data.ToString();
            formHasChanged = true;
            randomInd = string.Empty;
            StateHasChanged();
        }
    }

    void FormMod(FormFieldChangedEventArgs args) => formHasChanged = true;

    public void Dispose()
    {
        NotifierSvc.SummaryTypeDeleted -= Close;
        GC.SuppressFinalize(this);
    }
}
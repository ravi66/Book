@using Book.Models;
@using Book.Services;

<MudTooltip Text="Delete Entry" Delay="500" Duration="0" ShowOnFocus="false" >
    <MudIconButton Variant="@Variant" Size="@Size" Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="DeleteTransaction" aria-label="delete entry" />
</MudTooltip>

@code
{
    [Parameter] public Transaction Transaction { get; set; }

    [Parameter] public Variant Variant { get; set; }

    [Parameter] public Size Size { get; set; }

    [Parameter] public TransactionDialog? TransactionDialog { get; set; }

    [Inject] public IDialogService DialogService { get; set; }

    [Inject] public TransactionRepository Repo { get; set; }

    [Inject] public MessageSvc MessageSvc { get; set; }

    async Task DeleteTransaction()
    {
        var parameters = new DialogParameters<ConfirmDialog>
        {
            { x => x.ConfirmationTitle, $"Delete {Transaction.TransactionTypeName} Entry" },
            { x => x.ConfirmationMessage, $"Are you sure you want to delete this entry for {Transaction.Value:C2}?" },
            { x => x.CancelColorInt, 0 },
            { x => x.DoneColorInt, 1 }
        };

        var dialog = DialogService.Show<ConfirmDialog>("Confirm", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && Transaction.TransactionId != 0)
        {
            await Repo.DeleteTransaction(Transaction.TransactionId);

            MessageSvc.ChangeTransactions(new List<int> { Transaction.TransactionDate.Year });

            if (TransactionDialog != null) TransactionDialog.Close();
        }
    }
}

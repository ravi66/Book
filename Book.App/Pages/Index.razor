@page "/"
@implements IDisposable

<PageTitle>@BookName - Summary @Year</PageTitle>

<MudHidden Breakpoint="Breakpoint.Xs" Invert="true" >
    <MudGrid Class="pa-2" Justify="Justify.Center" Spacing="1" >
        @if (MonthlySummaries != null)
        {
            <MudMenu Dense="true" AnchorOrigin="Origin.BottomLeft" Label="@Year.ToString()" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Size="Size.Small ">
                @foreach (int year in Years)
                {
                    <MudMenuItem OnClick="() => YearChanged(year)" OnTouch="() => YearChanged(year)">@year</MudMenuItem>
                }
            </MudMenu>

            foreach (var summary in MonthlySummaries[12].SummaryDetails)
            {
                <MudItem>
                    <MudButton Variant="Variant.Outlined" OnClick="@(e => YearChart(summary.SummaryTypeId))" Size="Size.Small">@summary.SummaryName</MudButton>
                </MudItem>
            }
        }
    </MudGrid>
</MudHidden>

@if (MonthlySummaries != null)
{
    <MudTable Dense="true" Hover="true" Elevation="5" Breakpoint="Breakpoint.Xs" Items="@MonthlySummaries" Class="pa-1">
        <ColGroup>
            <col style="width: 10%;" />
            @foreach (var summary in MonthlySummaries[12].SummaryDetails)
            {
                <col />
            }
        </ColGroup>
        <HeaderContent>
            <MudTh Class="pt-0 pb-1">
                <MudTooltip Text="View another year" Delay="500" Duration="0" ShowOnFocus="false" Placement="Placement.End" Arrow="true">
                    <MudMenu Dense="true" AnchorOrigin="Origin.BottomLeft" Label="@Year.ToString()" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Size="Size.Small" Class="pt-0 pb-0">
                        @foreach (int year in Years)
                        {
                            <MudMenuItem OnClick="() => YearChanged(year)" OnTouch="() => YearChanged(year)">@year</MudMenuItem>
                        }
                    </MudMenu>
                </MudTooltip>
            </MudTh>
            @foreach (var summary in MonthlySummaries[12].SummaryDetails)
            {
                <MudTh Style="text-align:center" Class="pt-0 pb-1">
                    <MudTooltip Text="@($"{summary.SummaryName} year chart")" Delay="500" Duration="0" ShowOnFocus="false">
                        <MudButton Variant="Variant.Outlined" OnClick="@(e => YearChart(summary.SummaryTypeId))" Size="Size.Small" Class="pt-0 pb-0">@summary.SummaryName</MudButton>
                        </MudTooltip>
                    </MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Month" Class="pt-1 pb-1">
                <MudTooltip Text="@($"{context.MonthNameFull} expenditure chart")" Delay="500" Duration="0" ShowOnFocus="false" Placement="Placement.End" Arrow="true">
                    <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(e => MonthChart(context.MonthNo - 1))" Class="pt-0 pb-0"><MudText>@context.MonthName</MudText></MudButton>
                    </MudTooltip>
                </MudTd>
                @foreach (var summary in context.SummaryDetails)
            {
                <MudTd Style="text-align:center" DataLabel="@summary.SummaryName" Class="pt-0 pb-0">
                    <MudLink OnClick="(e => TransList(summary.SummaryName, summary.Types, context.MonthNo))" Class="@summary.CssClass">@summary.Total.ToString("N2")</MudLink>
                    </MudTd>
            }
        </RowTemplate>
    </MudTable>
}
else
{
    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudStack>
}

@code
{
    [Inject] public IDialogService DialogService { get; set; }

    [Inject] internal IBookSettingSvc BookSettingSvc { get; set; }

    [Inject] public INotifierSvc NotifierSvc { get; set; }

    [Inject] internal ITransactionRepository Repo { get; set; }

    [Inject] internal ISummaryTypeRepository SummaryRepo { get; set; }

    public IEnumerable<SummaryType> SummaryTypes { get; set; }

    public record MonthlySummary(string MonthName, string MonthNameFull, int MonthNo, List<SummaryDetail> SummaryDetails);

    public record SummaryDetail(int SummaryTypeId, string SummaryName, List<int> Types, decimal Total, string CssClass, bool HasTransactions);

    public List<MonthlySummary> MonthlySummaries { get; set; }

    private IEnumerable<Transaction> Transactions { get; set; }

    private string BookName { get; set; } = "Book";

    public int Year { get; set; }

    public int[] Years { get; set; } = [];

    private DateTime StartDate { get; set; }

    public DateTime EndDate { get; set; }

    protected async override Task OnInitializedAsync()
    {
        BookName = await BookSettingSvc.GetBookName();

        NotifierSvc.TransactionsChanged += TransactionsChanged;

        Years = Enumerable.Range(await BookSettingSvc.GetStartYear(), await BookSettingSvc.GetEndYear() - await BookSettingSvc.GetStartYear() + 1).ToArray();
        Year = Years.Max() >= DateTime.Today.Year ? DateTime.Today.Year : Years.Max();

        SummaryTypes = (await SummaryRepo.LoadSummary()).Where(s => s.Types.Count > 0).ToList();

        await LoadSummary();
    }

    private async Task LoadSummary()
    {
        // Get all Transactions for year
        Transactions = await Repo.GetTransactionsByTypeMonth([], Year, 0);

        MonthlySummaries = [];

        for (int i = 1; i < 13; i++)
        {
            MonthlySummaries.Add(new MonthlySummary(CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(i), CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i), i, CreateSummaryDetails(i)));
        }

        // Add Total row
        MonthlySummaries.Add(new MonthlySummary("Total", Year.ToString(), 0, CreateSummaryDetails(0)));

        // Remove Zero Transactions SummaryDetails
        List<int> summariesToBeRemoved = MonthlySummaries[12].SummaryDetails.Where(s => !s.HasTransactions).Select(s => s.SummaryTypeId).ToList();

        foreach (MonthlySummary monthlySummary in MonthlySummaries)
        {
            monthlySummary.SummaryDetails.RemoveAll(x => summariesToBeRemoved.Contains(x.SummaryTypeId));
        }

        StateHasChanged();
    }

    private List<SummaryDetail> CreateSummaryDetails(int monthNo)
    {
        List<SummaryDetail> summaryDetails = [];

        SetDates(monthNo);

        // Total Summary (column)
        var total = Transactions.Where(t => t.TransactionDate >= StartDate && t.TransactionDate < EndDate).Sum(t => t.Value) * -1;

        summaryDetails.Add(new SummaryDetail(0, "Total", [], total, total >= 0 ? Constants.PositiveValueCssClass : Constants.NegativeValueCssClass, true));

        // User defined Summaries
        foreach (SummaryType summaryType in SummaryTypes)
        {
            total = Transactions.Where(t => t.TransactionDate >= StartDate && t.TransactionDate < EndDate && summaryType.Types.Contains((int)t.TransactionTypeId)).Sum(t => t.Value) * -1;

            summaryDetails.Add(new SummaryDetail(summaryType.SummaryTypeId, summaryType.Name, summaryType.Types, total, total >= 0 ? Constants.PositiveValueCssClass : Constants.NegativeValueCssClass, monthNo == 0 && Transactions.Any(t => t.TransactionDate >= StartDate && t.TransactionDate < EndDate && summaryType.Types.Contains((int)t.TransactionTypeId))));
        }

        return summaryDetails;
    }

    private void SetDates(int monthNo)
    {
        if (monthNo > 0)
        {
            StartDate = new DateTime(Year, monthNo, 1);
            EndDate = StartDate.AddMonths(1);
        }
        else
        {
            StartDate = new DateTime(Year, 1, 1);
            EndDate = new DateTime(Year + 1, 1, 1);
        }
    }

    public async void YearChanged(int year)
    {
        Year = year;
        await LoadSummary();
    }

    private void TransactionsChanged(object? sender, TransactionsChangedEventArgs args)
    {
        foreach (int transactionYear in args.Years)
        {
            if (transactionYear == Year)
            {
                LoadSummary();
                break;
            }
        }
    }

    private void YearChart(int summaryTypeId)
    {
        List<ChartSeries> summarySeries = [];

        if (summaryTypeId > 0)
        {
            summarySeries.Add(GetSummarySeries(summaryTypeId));
        }
        else
        {
            foreach (var summary in MonthlySummaries[12].SummaryDetails)
            {
                summarySeries.Add(GetSummarySeries(summary.SummaryTypeId));
            }
        }

        var parameters = new DialogParameters<YearChartDialog>
            {
                { p => p.DialogTitle, $"{Year} Chart" },
                { p => p.Series, summarySeries },
            };

        var options = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.ExtraLarge };

        DialogService.Show<YearChartDialog>("", parameters, options);
    }

    private ChartSeries GetSummarySeries(int summaryTypeId)
    {
        List<double> summaryData = [];

        for (int i = 0; i < 12; i++)
        {
            summaryData.Add((double)MonthlySummaries[i].SummaryDetails.Single(s => s.SummaryTypeId == summaryTypeId).Total);
        }

        return new ChartSeries { Name = MonthlySummaries[12].SummaryDetails.Single(s => s.SummaryTypeId == summaryTypeId).SummaryName, Data = [.. summaryData] };
    }

    private void MonthChart(int monthNo)
    {
        SetDates(monthNo + 1);

        monthNo = monthNo < 0 ? 12 : monthNo;

        string dialogTitle = monthNo < 12 ? $"{MonthlySummaries[monthNo].MonthNameFull} {Year} Expenditure" : $"{Year} Expenditure";

        var monthlyTransactions = Transactions
            .Where(t => t.TransactionDate >= StartDate && t.TransactionDate < EndDate && t.Value > 0)
            .GroupBy(t => t.TransactionTypeName)
            .Select(g => new { TransactionTypeName = g.Key, Value = g.Sum(t => t.Value) })
            .ToList();

        var parameters = new DialogParameters<MonthChartDialog>
            {
                { x => x.DialogTitle, dialogTitle },
                { x => x.SummaryData, MonthlySummaries[monthNo].SummaryDetails.Where(s => s.Total < 0 && s.SummaryTypeId != 0).Select(s => (double)(s.Total * -1)).ToArray() },
                { x => x.SummaryLabels, MonthlySummaries[monthNo].SummaryDetails.Where(s => s.Total < 0 && s.SummaryTypeId != 0).Select(s => s.SummaryName).ToArray() },
                { x => x.TypeData, monthlyTransactions.Select(s => (double)(s.Value)).ToArray() },
                { x => x.TypeLabels, monthlyTransactions.Select(s => s.TransactionTypeName).ToArray() },
            };

        var options = new DialogOptions() { NoHeader = true, MaxWidth = MaxWidth.ExtraLarge };

        DialogService.Show<MonthChartDialog>("", parameters, options);
    }

    protected async void TransList(string summaryName, List<int> types, int month)
    {
        string typesString = (types != null && types.Count > 0) ? typesString = string.Join(",", types) : string.Empty;

        var parameters = new DialogParameters<TransListDialog>
            {
                { x => x.Mode, 1 },
                { x => x.Name, summaryName },
                { x => x.TypesString, typesString },
                { x => x.Year, Year },
                { x => x.Month, month }
            };

        DialogService.Show<TransListDialog>("Entry List", parameters);
    }

    public void Dispose()
    {
        NotifierSvc.TransactionsChanged -= TransactionsChanged;
        GC.SuppressFinalize(this);
    }
}

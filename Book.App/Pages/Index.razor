@page "/"
@implements IAsyncDisposable

<PageTitle>@BookName - Summary @Year</PageTitle>

<MudHidden Breakpoint="Breakpoint.Xs" Invert="true" >
    <MudGrid Class="pa-2" Justify="Justify.Center" Spacing="1" >
        @if (MonthlySummaries != null)
        {
            <MudMenu Dense="true" AnchorOrigin="Origin.BottomLeft" Label="@Year.ToString()" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Size="Size.Small ">
                @foreach (int year in Years)
                {
                    <MudMenuItem OnClick="() => YearChanged(year)" OnTouch="() => YearChanged(year)">@year</MudMenuItem>
                }
            </MudMenu>

            foreach (var summary in MonthlySummaries[12].SummaryDetails)
            {
                <MudItem>
                    <MudButton Variant="Variant.Outlined" OnClick="@(e => YearChart(summary))" Size="Size.Small">@summary.SummaryName</MudButton>
                </MudItem>
            }
        }
    </MudGrid>
</MudHidden>

@if (MonthlySummaries != null)
{
    <LoadDemoData @ref="LoadDemoData" />

    <MudTable Dense="true" Hover="true" Elevation="5" Breakpoint="Breakpoint.Xs" Items="@MonthlySummaries" Class="pa-1">
        <ColGroup>
            <col style="width: 10%;" />
            @foreach (var summary in MonthlySummaries[12].SummaryDetails)
            {
                <col />
            }
        </ColGroup>
        <HeaderContent>
            <MudTh Class="pt-0 pb-1">
                <MudTooltip Text="@Localizer["ViewAnotherYear"]" Delay="500" Duration="0" ShowOnFocus="false" Placement="Placement.End" Arrow="true">
                    <MudMenu Dense="true" AnchorOrigin="Origin.BottomLeft" Label="@Year.ToString()" Variant="Variant.Outlined" EndIcon="@Icons.Material.Filled.KeyboardArrowDown" Size="Size.Small" Class="pt-0 pb-0">
                        @foreach (int year in Years)
                        {
                            <MudMenuItem OnClick="() => YearChanged(year)" OnTouch="() => YearChanged(year)">@year</MudMenuItem>
                        }
                    </MudMenu>
                </MudTooltip>
            </MudTh>
            @foreach (var summary in MonthlySummaries[12].SummaryDetails)
            {
                <MudTh Style="text-align:center" >
                    <MudTooltip Text="@(Localizer["YearChart", summary.SummaryName])" Delay="500" Duration="0" ShowOnFocus="false">
                        <MudButton Style="@summary.ChartColour" Variant="Variant.Outlined" OnClick="@(e => YearChart(summary))" Size="Size.Small" Class="py-0 px-2">@summary.SummaryName</MudButton>
                    </MudTooltip>
                </MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Month" Class="py-1" >
                <MudTooltip Text="@(Localizer["ExpenditureChart", context.MonthNameFull])" Delay="500" Duration="0" ShowOnFocus="false" Placement="Placement.End" Arrow="true">
                    <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="@(e => MonthChart(context.MonthNo - 1))" Class="py-0 px-2"><MudText>@context.MonthName</MudText></MudButton>
                </MudTooltip>
            </MudTd>
            @foreach (var summary in context.SummaryDetails)
            {
                <MudTd Style="text-align:center" DataLabel="@summary.SummaryName" Class="py-0" >
                    <MudLink Color="Color.Inherit" OnClick="(e => TransList(summary.SummaryName, summary.Types, context.MonthNo))"><MudText Style="@Utils.BalanceColour(summary.Total, DarkMode)">@summary.Total.ToString("N2")</MudText></MudLink>
                </MudTd>
            }
        </RowTemplate>
    </MudTable>
}
else
{
    <MudStack AlignItems="AlignItems.Center" Justify="Justify.Center">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </MudStack>
}

@code
{
    [Inject] public NavigationManager NavigationManager { get; set; }

    [Inject] public IDialogService DialogService { get; set; }

    [Inject] internal IBookSettingSvc BookSettingSvc { get; set; }

    [Inject] public INotifierSvc NotifierSvc { get; set; }

    [Inject] internal ITransactionRepository Repo { get; set; }

    [Inject] internal ISummaryTypeRepository SummaryRepo { get; set; }

    [Inject] PageParamsSvc PageParamsSvc { get; set; }

    List<SummaryType> SummaryTypes { get; set; } = [];

    record MonthlySummary(string MonthName, string MonthNameFull, int MonthNo, List<SummaryDetail> SummaryDetails);

    record SummaryDetail(int SummaryTypeId, string SummaryName, List<int> Types, decimal Total, bool HasTransactions, string ChartColour);

    List<MonthlySummary> MonthlySummaries { get; set; }

    List<Transaction> Transactions { get; set; }

    string BookName { get; set; } = string.Empty;

    int Year { get; set; }

    int[] Years { get; set; } = [];

    DateTime StartDate { get; set; }

    DateTime EndDate { get; set; }

    bool DarkMode { get; set; }

    LoadDemoData LoadDemoData;

    bool LoadDemoChecked = false;

    protected async override Task OnInitializedAsync()
    {
        BookName = await BookSettingSvc.GetBookName();
        DarkMode = await BookSettingSvc.GetDarkMode();

        NotifierSvc.TransactionsChanged += TransactionsChanged;
        NotifierSvc.ThemeChanged += ThemeChanged;

        Years = Enumerable.Range(await BookSettingSvc.GetStartYear(), await BookSettingSvc.GetEndYear() - await BookSettingSvc.GetStartYear() + 1).ToArray();

        if (PageParamsSvc.Year != 0)
        {
            Year = PageParamsSvc.Year;
        }
        else if (DateTime.Today.Year <= Years.Max() && DateTime.Today.Year >= Years.Min())
        {
            Year = DateTime.Today.Year;
        }
        else
        {
            Year = DateTime.Today.Year > Years.Max() ? Years.Max() : Years.Min();
        }

        SummaryTypes = (await SummaryRepo.LoadSummary()).Where(s => s.TransactionTypes.Count > 0).ToList();

        await LoadSummary();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && !LoadDemoChecked)
        {
            LoadDemoChecked = true;

            if (!await SummaryRepo.IsEmptyDb()) return;

            await LoadDemoData.ConfirmLoad();
        }
    }

    async Task LoadSummary()
    {
        // Get all Transactions for year
        Transactions = (await Repo.GetTransactionsByTypeMonth([], Year, 0)).ToList();

        MonthlySummaries = [];

        for (int i = 1; i < 13; i++)
        {
            MonthlySummaries.Add(new MonthlySummary
            (
                CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(i),
                CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i),
                i,
                CreateSummaryDetails(i)
            ));
        }

        // Add Total (Year) row
        MonthlySummaries.Add(new MonthlySummary
        (
            Localizer["Total"],
            Year.ToString(),
            0,
            CreateSummaryDetails(0)
        ));

        // Remove Zero Transactions SummaryDetails
        List<int> summariesToBeRemoved = MonthlySummaries[12].SummaryDetails.Where(s => !s.HasTransactions).Select(s => s.SummaryTypeId).ToList();

        foreach (MonthlySummary monthlySummary in MonthlySummaries)
        {
            monthlySummary.SummaryDetails.RemoveAll(x => summariesToBeRemoved.Contains(x.SummaryTypeId));
        }

        StateHasChanged();
    }

    List<SummaryDetail> CreateSummaryDetails(int monthNo)
    {
        List<SummaryDetail> summaryDetails = [];

        SetDates(monthNo);

        // Total Summary (column)
        var total = Transactions.Where(t => t.TransactionDate >= StartDate && t.TransactionDate < EndDate).Sum(t => t.Value) * -1;

        summaryDetails.Add(new SummaryDetail
        (
            0,
            Localizer["Total"],
            [],
            total,
            true,
            string.Empty
        ));

        // User defined Summaries
        foreach (SummaryType summaryType in SummaryTypes)
        {
            total = Transactions.Where(t => t.TransactionDate >= StartDate && t.TransactionDate < EndDate && summaryType.TransactionTypes.Any(tt => tt.TransactionTypeId == t.TransactionTypeId)).Sum(t => t.Value) * -1;

            summaryDetails.Add(new SummaryDetail
            (
                summaryType.SummaryTypeId,
                summaryType.Name,
                summaryType.TransactionTypes.Select(t => t.TransactionTypeId).ToList(),
                total,
                monthNo == 0 && Transactions.Any(t => t.TransactionDate >= StartDate && t.TransactionDate < EndDate && summaryType.TransactionTypes.Any(tt => tt.TransactionTypeId == t.TransactionTypeId)),
                $"color:{summaryType.ChartColour};"
            ));
        }

        return summaryDetails;
    }

    void SetDates(int monthNo)
    {
        if (monthNo > 0)
        {
            StartDate = new DateTime(Year, monthNo, 1);
            EndDate = StartDate.AddMonths(1);
        }
        else
        {
            StartDate = new DateTime(Year, 1, 1);
            EndDate = new DateTime(Year + 1, 1, 1);
        }
    }

    async void YearChanged(int year)
    {
        Year = year;
        PageParamsSvc.Year = year;
        await LoadSummary();
    }

    void YearChart(SummaryDetail summary)
    {
        PageParamsSvc.Init();
        PageParamsSvc.Mode = 1;
        PageParamsSvc.Year = Year;
        PageParamsSvc.Name = summary.SummaryName;
        PageParamsSvc.SummaryTypeId = summary.SummaryTypeId;
        PageParamsSvc.Transactions = summary.SummaryTypeId > 0 ? Transactions.Where(t => t.SummaryName == summary.SummaryName).ToList() : Transactions.OrderBy(t => t.Order).ToList();

        NavigationManager.NavigateTo("LineChart", false);
    }

    void MonthChart(int monthNo)
    {
        string dialogTitle = string.Empty;
        List<Transaction> transactions = [];

        if (monthNo >= 0)
        {
            dialogTitle = Localizer["Expenditure", MonthlySummaries[monthNo].MonthNameFull, Year];

            SetDates(++monthNo);
            transactions = Transactions
                .Where(t => t.TransactionDate >= StartDate && t.TransactionDate < EndDate && t.Value > 0)
                .ToList();
        }
        else
        {
            dialogTitle = Localizer["Expenditure", Year, ""];
            transactions = Transactions.Where(t => t.Value > 0).ToList();
        }

        var parameters = new DialogParameters<MonthChartDialog>
            {
                { p => p.DialogTitle, dialogTitle },
                { p => p.Transactions, transactions },
            };

        DialogService.Show<MonthChartDialog>("", parameters);
    }

    void TransList(string summaryName, List<int> types, int month)
    {
        PageParamsSvc.Init();
        PageParamsSvc.Mode = 1;
        PageParamsSvc.Name = summaryName;
        PageParamsSvc.Types = types;
        PageParamsSvc.Year = Year;
        PageParamsSvc.Month = month;

        NavigationManager.NavigateTo("TransList", false);
    }

    void TransactionsChanged(object? sender, TransactionsChangedEventArgs args)
    {
        foreach (int transactionYear in args.Years)
        {
            if (transactionYear == Year)
            {
                LoadSummary();
                break;
            }
        }
    }

    void ThemeChanged(object? sender, bool darkMode)
    {
        DarkMode = darkMode;
        StateHasChanged();
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        NotifierSvc.TransactionsChanged -= TransactionsChanged;
        NotifierSvc.ThemeChanged -= ThemeChanged;

        GC.SuppressFinalize(this);
    }
}
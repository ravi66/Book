@page "/database"
@implements IAsyncDisposable

<PageTitle>@BookName - @Localizer["Database"]</PageTitle>

<MudPaper Class="pa-2" Elevation="5">
    <MudGrid Class="align-center">
        <MudItem>
            <MudIconButton Icon="@SvgIcons.Database" Color="Color.Success" Size="Size.Large" />
        </MudItem>
        <MudItem Class="pa-0">
            <MudText Typo="Typo.h5">@Localizer["Database"]</MudText>
        </MudItem>
    </MudGrid>
</MudPaper>
<InputFile id="inputFile" OnChange="@UploadDb" accept=".sqlite3" hidden />

<MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Class="mt-4 mb-2" Elevation="10" ContentAlignment="HorizontalAlignment.Start" NoIcon="true">
    <MudStack AlignItems="AlignItems.Center" Row="true">
        <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Large" />
        <MudText Typo="Typo.h5">@Localizer["DatabaseAlertMessage", LastBackupDate]</MudText>
    </MudStack>
</MudAlert> 

<MudContainer Class="ma-0 pa-2">
    <MudGrid >
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Elevation="5">
                <MudCardContent Style="min-height: 130px;">
                    <MudText Typo="Typo.h5">@Localizer["Backup"]</MudText>
                    <MudText Typo="Typo.body2">@Localizer["DatabaseBackupText"]</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CloudDownload" Href="@BookDownloadUrl" Target="_blank" download="@BookDbFileName" OnClick="SetLastBackupDate">@Localizer["Backup"]</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Elevation="5">
                <MudCardContent Style="min-height: 130px;">
                    <MudText Typo="Typo.h5">@Localizer["Restore"]</MudText>
                    <MudText Typo="Typo.body2">@Localizer["DatabaseRestoreText"]</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" HtmlTag="label" for="inputFile" StartIcon="@Icons.Material.Filled.CloudUpload">@Localizer["Restore"]</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Elevation="5">
                <MudCardContent Style="min-height: 130px;">
                    <MudText Typo="Typo.h5">@Localizer["LoadDemoData"]</MudText>
                    <MudText Typo="Typo.body2">@Localizer["DatabaseDemoText"]</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CloudUpload" OnClick="LoadDemoData">@Localizer["LoadDemoData"]</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" lg="3">
            <MudCard Elevation="5">
                <MudCardContent Style="min-height: 130px;">
                    <MudText Typo="Typo.h5">@Localizer["Delete"]</MudText>
                    <MudText Typo="Typo.body2">@Localizer["DatabaseDeleteText"]</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" OnClick="DeleteDatabase">@Localizer["Delete"]</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    [Inject] public IJSRuntime JsRuntime { get; set; }

    [Inject] public NavigationManager NavigationManager { get; set; }

    [Inject] public IDialogService DialogService { get; set; }

    [Inject] internal IBookSettingSvc BookSettingSvc { get; set; }

    [Inject] HttpClient HttpClient { get; set; }

    [Inject] public IBookDbMigratorSvc DbMigrator { get; set; }

    IJSObjectReference? jsModule;

    string BookDownloadUrl { get; set; } = string.Empty;

    string BookDbFileName { get; set; }

    string BookName { get; set; } = string.Empty;

    string LastBackupDate { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        BookName = await BookSettingSvc.GetBookName();
        LastBackupDate = await BookSettingSvc.GetLastBackupDate();
        BookDbFileName = $"{await BookSettingSvc.GetDbPrefix()}-{DateTime.Now:yyyyMMddhhmm}.sqlite3";

        jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/database.js");
        BookDownloadUrl = await GetDownloadUrl();
    }

    async ValueTask<string?> GetDownloadUrl() => jsModule is not null ? await jsModule.InvokeAsync<string>("generateDownloadUrl") : null;

    async void UploadDb(InputFileChangeEventArgs e)
    {
        var fileContent = new byte[e.File.Size];
        await e.File.OpenReadStream().ReadAsync(fileContent);
        await jsModule.InvokeVoidAsync("uploadDatabase", fileContent);
        NavigationManager.NavigateTo("/", true);
    }

    async void DeleteDatabase()
    {
        var dialog = DialogService.Show<ConfirmDialog>("", new DialogParameters<ConfirmDialog>
            {
                { x => x.AcceptColour, Color.Error },
                { x => x.AcceptToolTip, Localizer["DeleteSavedChanges"] },
                { x => x.CancelColour, Color.Success },
                { x => x.Warning, true },
                { x => x.WarningMessage, LastBackupDate != Localizer["NoBackupRecorded"] ? Localizer["ChangesLostBU", LastBackupDate] : Localizer["ChangesLost"] },
            });

        if (!(await dialog.Result).Canceled)
        {
            var success = await DbMigrator.DeleteDatabase();
            if (success) NavigationManager.NavigateTo("/", true);
            NavigationManager.NavigateTo("refresh/Database");
        }
    }

    async void SetLastBackupDate()
    {
        await BookSettingSvc.SetLastBackupDate(DateTime.Now);
        NavigationManager.NavigateTo("refresh/Database");
    }

    async void LoadDemoData()
    {
        var dialog = DialogService.Show<ConfirmDialog>("", new DialogParameters<ConfirmDialog>
            {
                { x => x.AcceptColour, Color.Error },
                { x => x.AcceptToolTip, Localizer["DatabaseDemoAcptToolTip"] },
                { x => x.CancelColour, Color.Success },
                { x => x.Warning, true },
                { x => x.WarningMessage, LastBackupDate != Localizer["NoBackupRecorded"] ? Localizer["ChangesLostBU", LastBackupDate] : Localizer["ChangesLost"] },
            });

        if (!(await dialog.Result).Canceled)
        {
            using HttpResponseMessage response = await HttpClient.GetAsync("Demo.bin");
            if (response.IsSuccessStatusCode)
            {
                await jsModule.InvokeVoidAsync("uploadDatabase", (byte[]?)await response.Content.ReadAsByteArrayAsync());
                NavigationManager.NavigateTo("/", true);
            }
        }

    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }

        GC.SuppressFinalize(this);
    }
}
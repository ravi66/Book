@page "/database"
@implements IAsyncDisposable

<PageTitle>@BookName - @Localizer["Database"]</PageTitle>

<MudPaper Class="pa-2" Elevation="5">
    <MudGrid Class="align-center">
        <MudItem>
            <MudIconButton Icon="@SvgIcons.Database" Color="Color.Success" Size="Size.Large" />
        </MudItem>
        <MudItem Class="pa-0">
            <MudText Typo="Typo.h5">@Localizer["Database"]</MudText>
        </MudItem>
    </MudGrid>
</MudPaper>
<InputFile id="inputFile" OnChange="@UploadDb" accept=".sqlite3" hidden />
<LoadDemoData @ref="LoadDemoData" />

<MudAlert Severity="Severity.Error" Variant="Variant.Outlined" Class="mt-4 mb-2" Elevation="10" ContentAlignment="HorizontalAlignment.Start" NoIcon="true">
    <MudStack AlignItems="AlignItems.Center" Row="true">
        <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Large" />
        <MudText Typo="Typo.h5">@Localizer["DatabaseAlertMessage", LastBackupDateStr]</MudText>
    </MudStack>
</MudAlert> 

<MudContainer Class="ma-0 pa-2">
    <MudGrid >
        <MudItem xs="12" sm="6" md="4" >
            <MudCard Elevation="5">
                <MudCardContent Class="pa-2" Style="min-height: 90px;">
                    <MudText Typo="Typo.h6">@Localizer["Backup"]</MudText>
                    <MudText Typo="Typo.body2">@Localizer["DatabaseBackupText"]</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CloudDownload" OnClick="ExportDb">@Localizer["Backup"]</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" >
            <MudCard Elevation="5">
                <MudCardContent Class="pa-2" Style="min-height: 90px;">
                    <MudText Typo="Typo.h6">@Localizer["Restore"]</MudText>
                    <MudText Typo="Typo.body2">@Localizer["DatabaseRestoreText"]</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" HtmlTag="label" for="inputFile" StartIcon="@Icons.Material.Filled.CloudUpload">@Localizer["Restore"]</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4" >
            <MudCard Elevation="5">
                <MudCardContent Class="pa-2" Style="min-height: 90px;">
                    <MudText Typo="Typo.h6">@Localizer["LoadDemoData"]</MudText>
                    <MudText Typo="Typo.body2">@Localizer["DatabaseDemoText"]</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CloudUpload" OnClick="UploadDemoData">@Localizer["LoadDemoData"]</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudCard Elevation="5">
                <MudCardContent Class="pa-2" Style="min-height: 90px;">
                    <MudText Typo="Typo.h6">@Localizer["ExportAsJson"]</MudText>
                    <MudText Typo="Typo.body2">@Localizer["ExportAsJsonText"]</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CloudDownload" OnClick="ExportAsJson">@Localizer["ExportAsJson"]</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudCard Elevation="5">
                <MudCardContent Class="pa-2" Style="min-height: 90px;">
                    <MudText Typo="Typo.h6">@Localizer["Delete"]</MudText>
                    <MudText Typo="Typo.body2">@Localizer["DatabaseDeleteText"]</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" OnClick="DeleteDatabase">@Localizer["Delete"]</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    [Inject] public IJSRuntime JsRuntime { get; set; }

    [Inject] public NavigationManager NavigationManager { get; set; }

    [Inject] public IDialogService DialogService { get; set; }

    [Inject] internal IBookSettingSvc BookSettingSvc { get; set; }

    [Inject] public IBookDbMigratorSvc DbMigrator { get; set; }

    [Inject] internal ISummaryTypeRepository SRepo { get; set; }

    [Inject] internal ITransactionTypeRepository TTRepo { get; set; }

    [Inject] internal ITransactionRepository TRepo { get; set; }

    IJSObjectReference? jsModule;

    string BookName { get; set; } = string.Empty;

    string LastBackupDateStr { get; set; } = string.Empty;

    DateTime LastBUDate = DateTime.MinValue;

    LoadDemoData LoadDemoData;

    protected override async Task OnInitializedAsync()
    {
        BookName = await BookSettingSvc.GetBookName();
        LastBackupDateStr = await BookSettingSvc.GetLastBackupDate();
        DateTime.TryParse(LastBackupDateStr, out LastBUDate);

        jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./Pages/Database.razor.js");
    }

    async void ExportDb()
    {
        if (jsModule is null) return;

        await jsModule.InvokeVoidAsync("downloadDb", Constants.BookDbCacheName, Constants.BookDbPath, $"{await BookSettingSvc.GetDbPrefix()}-{DateTime.Now:yyyyMMddhhmm}.sqlite3");

        await BookSettingSvc.SetLastBackupDate(DateTime.Now);
        LastBackupDateStr = await BookSettingSvc.GetLastBackupDate();
        DateTime.TryParse(LastBackupDateStr, out LastBUDate);

        StateHasChanged();
    }

    async void UploadDb(InputFileChangeEventArgs e)
    {
        if (jsModule is null) return;

        if (await CheckLastUpd()) return;

        var fileContent = new byte[e.File.Size];
        await e.File.OpenReadStream().ReadAsync(fileContent);
        await jsModule.InvokeVoidAsync("uploadDatabase", Constants.BookDbCacheName, Constants.BookDbPath, fileContent);
        NavigationManager.NavigateTo("/", true);
    }

    async void UploadDemoData()
    {
        if (await CheckLastUpd()) return;

        await LoadDemoData.Load();
    }

    async void ExportAsJson()
    {
        if (jsModule is null) return;

        string jsonDbFileName = "SummaryTypes.json";

        List<SummaryType> summaryTypes = await SRepo.Export();

        using var sStreamRef = new DotNetStreamReference(stream: new MemoryStream(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(summaryTypes))));
        await jsModule.InvokeVoidAsync("downloadJsonDb", jsonDbFileName, sStreamRef);

        jsonDbFileName = "TransactionTypes.json";

        List<TransactionType> transactionTypes = await TTRepo.Export();

        using var ttStreamRef = new DotNetStreamReference(stream: new MemoryStream(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(transactionTypes))));
        await jsModule.InvokeVoidAsync("downloadJsonDb", jsonDbFileName, ttStreamRef);

        jsonDbFileName = "Transactions.json";

        List<Transaction> transactions = await TRepo.Export();

        using var tStreamRef = new DotNetStreamReference(stream: new MemoryStream(Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(transactions))));
        await jsModule.InvokeVoidAsync("downloadJsonDb", jsonDbFileName, tStreamRef);
    }

    async void DeleteDatabase()
    {
        if (await CheckLastUpd()) return;

        var success = await DbMigrator.DeleteDatabase();
        if (success) NavigationManager.NavigateTo("/", true);
        NavigationManager.NavigateTo("refresh/Database");
    }

    async Task<bool> CheckLastUpd()
    {
        if (LastBUDate < await SRepo.GetLastUpdDt() ||
            LastBUDate < await TTRepo.GetLastUpdDt() ||
            LastBUDate < await TRepo.GetLastUpdDt())
        {
            var dialog = DialogService.Show<ConfirmDialog>("", new DialogParameters<ConfirmDialog>
            {
                { x => x.AcceptColour, Color.Error },
                { x => x.AcceptToolTip, Localizer["DeleteSavedChanges"] },
                { x => x.CancelColour, Color.Success },
                { x => x.Warning, true },
                { x => x.WarningMessage, LastBackupDateStr != Localizer["NoBackupRecorded"] ? Localizer["ChangesLostBU", LastBackupDateStr] : Localizer["ChangesLost"] },
            });

            return (await dialog.Result).Canceled;
        }

        return false;
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }

        GC.SuppressFinalize(this);
    }
}
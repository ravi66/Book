@page "/database"
@implements IAsyncDisposable

<PageTitle>@BookName - Database</PageTitle>

<MudText Typo="Typo.h4" GutterBottom="false">
    <MudIcon Icon="@Icons.Material.Filled.Storage" Color="Color.Primary" /> Database
</MudText>
<InputFile id="inputFile" OnChange="@UploadDb" accept=".sqlite3" hidden></InputFile>

<MudAlert Severity="Severity.Error" Class="mb-6" Elevation="6">
    <MudText Typo="Typo.h5">
        Any changes you make are saved in an SQLite database. It is highly recommended
        to periodically back this up. Last backup: @LastBackupDate.
    </MudText>
</MudAlert>

<MudGrid>
    <MudItem xs="12" md="6" lg="4">
        <MudCard Elevation="5">
            <MudCardContent Style="min-height: 100px;">
                <MudText Typo="Typo.h5">Back up</MudText>
                <MudText Typo="Typo.body2">Copy the database to a file</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CloudDownload" Href="@BookDownloadUrl" Target="_blank" download="@BookDbFileName" OnClick="SetLastBackupDate">Backup</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" md="6" lg="4">
        <MudCard Elevation="5">
            <MudCardContent Style="min-height: 100px;">
                <MudText Typo="Typo.h5">Restore</MudText>
                <MudText Typo="Typo.body2">Replace the database with a previous backup</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" HtmlTag="label" for="inputFile" StartIcon="@Icons.Material.Filled.CloudUpload">Restore</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" md="6" lg="4">
        <MudCard Elevation="5">
            <MudCardContent Style="min-height: 100px;">
                <MudText Typo="Typo.h5">Load Demo Data</MudText>
                <MudText Typo="Typo.body2">Replace the database with demonstration data</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.CloudUpload" OnClick="LoadDemoData">Demo Data</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
    <MudItem xs="12" md="6" lg="4">
        <MudCard Elevation="5">
            <MudCardContent Style="min-height: 100px;">
                <MudText Typo="Typo.h5">Delete</MudText>
                <MudText Typo="Typo.body2">Delete the current database and use one with default Types and no Entries</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Color="Color.Error" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" OnClick="DeleteDatabase">Delete</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code
{
    [Inject] public IJSRuntime JsRuntime { get; set; }

    [Inject] public NavigationManager NavigationManager { get; set; }

    [Inject] public IDialogService DialogService { get; set; }

    [Inject] internal IBookSettingSvc BookSettingSvc { get; set; }

    [Inject] HttpClient HttpClient { get; set; }

    public IJSObjectReference? jsModule;

    public string BookDownloadUrl { get; set; } = string.Empty;

    public string BookDbFileName { get; set; }

    private string BookName { get; set; } = "Book";

    public string LastBackupDate { get; set; } = "No backup taken";

    protected override async Task OnInitializedAsync()
    {
        BookName = await BookSettingSvc.GetBookName();
        LastBackupDate = await BookSettingSvc.GetLastBackupDate();
        BookDbFileName = $"{await BookSettingSvc.GetDbPrefix()}-{DateTime.Now:yyyyMMddhhmm}.sqlite3";

        jsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/database.js");
        BookDownloadUrl = await GetDownloadUrl();
    }

    public async ValueTask<string?> GetDownloadUrl() => jsModule is not null ? await jsModule.InvokeAsync<string>("generateDownloadUrl") : null;

    private async void UploadDb(InputFileChangeEventArgs e)
    {
        var fileContent = new byte[e.File.Size];
        await e.File.OpenReadStream().ReadAsync(fileContent);
        await jsModule.InvokeVoidAsync("uploadDatabase", fileContent);
        NavigationManager.NavigateTo("/", true);
    }

    private async void DeleteDatabase()
    {
        var parameters = new DialogParameters<ConfirmDialog>
            {
                { x => x.ConfirmationMessage, "<h2 style=\"color:Crimson\">*** WARNING ***</h2><h3>Are you sure you want to delete all your saved changes?</h3><h4>If you have not backed up your your changes they will be permanently lost</h4>" },
                { x => x.CancelColorInt, 0 },
                { x => x.DoneColorInt, 1 }
            };

        var options = new DialogOptions() { NoHeader = true };

        if (!(await DialogService.Show<ConfirmDialog>("Confirm", parameters, options).Result).Canceled)
        {
            var success = await jsModule.InvokeAsync<bool>("deleteDatabase");
            if (success) NavigationManager.NavigateTo("/", true);
            NavigationManager.NavigateTo("refresh/Database");
        }
    }

    private async void SetLastBackupDate()
    {
        await BookSettingSvc.SetLastBackupDate(DateTime.Now);
        NavigationManager.NavigateTo("refresh/Database");
    }

    private async void LoadDemoData()
    {
        using HttpResponseMessage response = await HttpClient.GetAsync("Demo.bin");
        if (response.IsSuccessStatusCode)
        {
            await jsModule.InvokeVoidAsync("uploadDatabase", (byte[]?)await response.Content.ReadAsByteArrayAsync());
            NavigationManager.NavigateTo("/", true);
        }
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (jsModule is not null)
        {
            await jsModule.DisposeAsync();
        }

        GC.SuppressFinalize(this);
    }
}

@page "/summarytypelist"
@implements IDisposable

<PageTitle>@BookName - @Localizer["Types"]</PageTitle>

<MudContainer Class="mx-0 px-0" >
    <MudGrid Class="pa-2" >
        <MudItem xs="12" md="6" Style="position:relative;height:100%;" >
            <MudTable Elevation="5" T="SummaryType" Items="@SummaryTypes" Dense="true" Hover="true" SortLabel="@Localizer["SortBy"]" AllowUnsorted="false" SelectedItemChanged="SummaryChanged" Outlined="true" >
                <ToolBarContent>
                    <MudText Class="ps-2 py-0" Typo="Typo.h5">@Localizer["Summaries"]</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh Class="py-0"><MudTableSortLabel SortBy="new Func<SummaryType, object>(x=>x.Name)">@Localizer["Name"]</MudTableSortLabel></MudTh>
                    <MudTh Class="py-0" ><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<SummaryType, object>(x=>x.Order)">@Localizer["Order"]</MudTableSortLabel></MudTh>
                    <MudTh Class="py-0" Style="text-align:center" >@Localizer["Colour"]</MudTh>
                    <MudTh Class="py-0" >@Localizer["Tools"]</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="@Localizer["Name"]" @ondblclick="@(() => EditSType(context.SummaryTypeId))">@context.Name</MudTd>
                    <MudTd DataLabel="@Localizer["Order"]" @ondblclick="@(() => EditSType(context.SummaryTypeId))" >@context.Order</MudTd>
                    <MudTd DataLabel="@Localizer["Colour"]" @ondblclick="@(() => EditSType(context.SummaryTypeId))" >
                        <MudIconButton Class="py-0" OnClick="() => ChangeSummaryColour(context)" Icon="@Icons.Material.Filled.ColorLens" Size="Size.Small" Style="@($"color:{@context.ChartColour};display:block;margin-left:auto;margin-right:auto;")" title="@Localizer["ChangeColour"]" />
                    </MudTd>
                    <MudTd DataLabel="@Localizer["Tools"]">
                        <MudIconButton Class="py-0" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" title="@Localizer["EditSummaryType"]" OnClick="() => EditSType(context.SummaryTypeId)" />
                        @if (context.TransactionTypes.Any())
                        {
                            <MudIconButton Class="py-0" Icon="@Icons.Material.Filled.PointOfSale" Color="Color.Primary" Size="Size.Small" title="@Localizer["ListEntriesForSummaryType"]" OnClick="()=> ListTransactionsSummary(context)" />
                            <MudIconButton Class="py-0" Icon="@Icons.Material.Filled.ShowChart" Color="Color.Primary" Size="Size.Small" title="@Localizer["SummaryTypeChart"]" OnClick="()=> SummaryTypeChart(context)" />
                        }
                        else if (context.SummaryTypeId > 0)
                        {
                            <DeleteSTypeBtn SummaryType="@context" Size="@Size.Small" Variant="@Variant.Text" />
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
            <MudFab StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" Size="Size.Small" OnClick="AddSummaryType" title="@Localizer["NewSummaryType"]" Class="z-10" Style="position:absolute;right:20px;top:35px;" />
        </MudItem>
        <MudItem xs="12" md="6" Style="height:100%;position:relative;" >
            <MudTable Items="@TransactionTypes" T="TransactionType" Hover="true" SortLabel="@Localizer["SortBy"]" AllowUnsorted="true" Elevation="5" Outlined="true" Dense="true">
                <ToolBarContent>
                    <MudText Class="ps-2 py-0" Typo="Typo.h5"><strong>@CurrentSummaryName</strong> @Localizer["EntryTypes"]</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh Class="py-0"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<TransactionType, object>(x=>x.Name)">@Localizer["Name"]</MudTableSortLabel></MudTh>
                    <MudTh Class="py-0" Style="text-align:center" >@Localizer["Colour"]</MudTh>
                    <MudTh Class="py-0">@Localizer["Tools"]</MudTh>
                </HeaderContent>
                <NoRecordsContent>
                    <MudText>@Localizer["NoEntryTypesFound"]</MudText>
                </NoRecordsContent>
                <RowTemplate>
                    <MudTd DataLabel="@Localizer["Name"]" @ondblclick="@(() => EditTType(context))">@context.Name</MudTd>
                    <MudTd DataLabel="@Localizer["Colour"]" @ondblclick="@(() => EditTType(context))" >
                        <MudIconButton Class="py-0" Icon="@Icons.Material.Filled.ColorLens" Size="Size.Small" Style="@($"color:{@context.ChartColour};display:block;margin-left:auto;margin-right:auto;")" OnClick="() => ChangeTypeColour(context)" title="@Localizer["ChangeColour"]" />
                    </MudTd>
                    <MudTd DataLabel="@Localizer["Tools"]">
                        <MudIconButton Class="py-0" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" title="@Localizer["EditEntryType"]" OnClick="() => EditTType(context)" />
                        <MudIconButton Class="py-0" Icon="@Icons.Material.Filled.PointOfSale" Color="Color.Primary" Size="Size.Small" title="@Localizer["ListEntriesForEntryType"]" OnClick="() => ListTransactionsTType(context)" />
                        <MudIconButton Class="py-0" Icon="@Icons.Material.Filled.ShowChart" Color="Color.Primary" Size="Size.Small" title="@Localizer["EntryTypeChart"]" OnClick="() => EntryTypeChart(context)" />
                        @if (!context.TransactionsFound && context.TransactionTypeId > -1)
                        {
                            <DeleteTTypeBtn TransactionType="@context" Variant="@Variant.Text" Size="@Size.Small" />
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
            <MudFab StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" Size="Size.Small" OnClick="() => AddTType(CurrentSummaryTypeId)" title="@Localizer["NewEntryType"]" Class="z-10" Style="position:absolute;right:20px;top:35px;" />
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    [Inject] public IDialogService DialogService { get; set; } = default!;

    [Inject] internal IBookSettingSvc BookSettingSvc { get; set; } = default!;

    [Inject] internal ISummaryTypeRepository SRepo { get; set; } = default!;

    [Inject] internal ITransactionTypeRepository TRepo { get; set; } = default!;

    [Inject] public INotifierSvc NotifierSvc { get; set; } = default!;

    [Inject] public NavigationManager NavigationManager { get; set; } = default!;

    [Inject] PageParamsSvc PageParamsSvc { get; set; } = default!;

    string BookName { get; set; } = string.Empty;

    List<SummaryType> SummaryTypes { get; set; } = [];

    List<TransactionType> TransactionTypes { get; set; } = [];

    int CurrentSummaryTypeId;

    string CurrentSummaryName = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        BookName = await BookSettingSvc.GetBookName();

        NotifierSvc.TransactionsChanged += LoadSummaryTypes;
        NotifierSvc.SummaryTypeDeleted += LoadSummaryTypes;
        NotifierSvc.SummaryTypeCreated += LoadSummaryTypes;
        NotifierSvc.TransactionTypeDeleted += LoadSummaryTypes;
        NotifierSvc.TransactionTypeCreated += LoadSummaryTypes;

        await LoadSummaryTypes(PageParamsSvc.SummaryTypeId);
    }

    async Task LoadSummaryTypes(int summaryTypeId)
    {
        SummaryTypes = await SRepo.GetAllSummaryTypes();

        if (summaryTypeId == 0)
        {
            SummaryChanged(SummaryTypes.First());
        }
        else
        {
            SummaryChanged(SummaryTypes.FirstOrDefault(s => s.SummaryTypeId == summaryTypeId) ?? default!);
        }
    }

    async void LoadSummaryTypes() => await LoadSummaryTypes(0);

    async void LoadSummaryTypes(object? sender, TransactionsChangedEventArgs args) => await LoadSummaryTypes(args.SummaryTypeId);

    async void LoadSummaryTypes(object? sender, int summaryTypeId) => await LoadSummaryTypes(summaryTypeId);

    void SummaryChanged(SummaryType summaryType)
    {
        CurrentSummaryTypeId = summaryType.SummaryTypeId;
        CurrentSummaryName = summaryType.Name;
        TransactionTypes = summaryType.TransactionTypes;
        StateHasChanged();
    }

    void ListTransactionsSummary(SummaryType summary)
    {
        PageParamsSvc.Init();
        PageParamsSvc.Mode = 2;
        PageParamsSvc.Name = summary.Name;
        PageParamsSvc.SummaryTypeId = summary.SummaryTypeId;
        PageParamsSvc.Types = summary.TransactionTypes.Select(s => s.TransactionTypeId).ToList();

        NavigationManager.NavigateTo("TransList", false);
    }

    void SummaryTypeChart(SummaryType summary)
    {
        PageParamsSvc.Init();
        PageParamsSvc.Mode = 2;
        PageParamsSvc.Name = summary.Name;
        PageParamsSvc.SummaryTypeId = summary.SummaryTypeId;
        PageParamsSvc.Types = summary.TransactionTypes.Select(s => s.TransactionTypeId).ToList();

        NavigationManager.NavigateTo("LineChart", false);
    }

    async void AddSummaryType()
    {
        var result = await DialogService.Show<STypeDialog>("").Result ?? default!;
        if (!result.Canceled) LoadSummaryTypes();
    }

    async void EditSType(int summaryTypeId)
    {
        var result = await DialogService.Show<STypeDialog>("", new DialogParameters<STypeDialog> { { x => x.SavedSummaryTypeId, summaryTypeId } }).Result ?? default!;
        if (!result.Canceled) LoadSummaryTypes();
    }

    void ListTransactionsTType(TransactionType transactionType)
    {
        PageParamsSvc.Init();
        PageParamsSvc.Mode = 3;
        PageParamsSvc.Name = transactionType.Name;
        PageParamsSvc.TransactionTypeId = transactionType.TransactionTypeId;
        PageParamsSvc.SummaryTypeId = transactionType.SummaryTypeId;

        NavigationManager.NavigateTo("TransList", false);
    }

    void EntryTypeChart(TransactionType transactionType)
    {
        PageParamsSvc.Init();
        PageParamsSvc.Mode = 3;
        PageParamsSvc.Name = transactionType.Name;
        PageParamsSvc.TransactionTypeId = transactionType.TransactionTypeId;
        PageParamsSvc.SummaryTypeId = transactionType.SummaryTypeId;

        NavigationManager.NavigateTo("LineChart", false);
    }

    async void AddTType(int summaryTypeId)
    {
        var result = await DialogService.Show<TTypeDialog>("", new DialogParameters<TTypeDialog> { { x => x.NewSummaryTypeId, summaryTypeId } }).Result ?? default!;
        if (!result.Canceled) await LoadSummaryTypes(summaryTypeId);
    }

    async void EditTType(TransactionType transactionType)
    {
        var result = await DialogService.Show<TTypeDialog>("", new DialogParameters<TTypeDialog> { { x => x.SavedTransactionTypeId, transactionType.TransactionTypeId }, }).Result ?? default!;
        if (!result.Canceled) await LoadSummaryTypes(transactionType.SummaryTypeId);
    }

    async void ChangeSummaryColour(SummaryType summaryType)
    {
        MudColor colour = String.IsNullOrEmpty(summaryType.ChartColour) ? Utils.RandomColour() : summaryType.ChartColour;

        var result = await DialogService.Show<ColourDialog>("", new DialogParameters<ColourDialog> { { x => x.Colour, colour }, { x => x.Title, $"{summaryType.Name} {Localizer["Colour"]}" } }).Result ?? default!;
        if (!result.Canceled && result.Data is not null)
        {
            summaryType.ChartColour = result.Data.ToString();
            await SRepo.UpdateSummaryType(summaryType);
            await LoadSummaryTypes(summaryType.SummaryTypeId);
        }
    }

    async void ChangeTypeColour(TransactionType transactionType)
    {
        MudColor colour = String.IsNullOrEmpty(transactionType.ChartColour) ? Utils.RandomColour() : transactionType.ChartColour;

        var result = await DialogService.Show<ColourDialog>("", new DialogParameters<ColourDialog> { { x => x.Colour, colour }, { x => x.Title, $"{transactionType.Name} {Localizer["Colour"]}" } }).Result ?? default!;
        if (!result.Canceled && result.Data is not null)
        {
            transactionType.ChartColour = result.Data.ToString();
            await TRepo.UpdateTransactionType(transactionType);
            await LoadSummaryTypes(transactionType.SummaryTypeId);
        };
    }

    public void Dispose()
    {
        NotifierSvc.TransactionsChanged -= LoadSummaryTypes;
        NotifierSvc.SummaryTypeDeleted -= LoadSummaryTypes;
        NotifierSvc.SummaryTypeCreated -= LoadSummaryTypes;
        NotifierSvc.TransactionTypeDeleted -= LoadSummaryTypes;
        NotifierSvc.TransactionTypeCreated -= LoadSummaryTypes;

        GC.SuppressFinalize(this);
    }
}
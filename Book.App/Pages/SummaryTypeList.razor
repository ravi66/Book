@page "/summarytypelist"
@implements IDisposable

<PageTitle>@BookName - @Localizer["Types"]</PageTitle>

<MudContainer Class="ma-0 pa-2">
    <MudGrid>
        <MudItem xs="12" md="6" Class="px-1" Style="position:relative;height:100%;" >
            <MudTable Elevation="5" T="SummaryType" Items="@SummaryTypes" Dense="true" Hover="true" SortLabel="@Localizer["SortBy"]" AllowUnsorted="false" SelectedItemChanged="SummaryChanged" Outlined="true">
                <ToolBarContent>
                    <MudText Class="ps-2 py-0" Typo="Typo.h5">@Localizer["Summaries"]</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh Class="py-0"><MudTableSortLabel SortBy="new Func<SummaryType, object>(x=>x.Name)">@Localizer["Name"]</MudTableSortLabel></MudTh>
                    <MudTh Class="py-0"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<SummaryType, object>(x=>x.Order)">@Localizer["Order"]</MudTableSortLabel></MudTh>
                    <MudTh Class="py-0"><MudTableSortLabel SortBy="new Func<SummaryType, object>(x=>x.CreateDate)">@Localizer["Created"]</MudTableSortLabel></MudTh>
                    <MudTh Class="py-0">@Localizer["Tools"]</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="@Localizer["Name"]" @ondblclick="@(() => EditSType(context.SummaryTypeId))">@context.Name</MudTd>
                    <MudTd DataLabel="@Localizer["Order"]" @ondblclick="@(() => EditSType(context.SummaryTypeId))">@context.Order</MudTd>
                    <MudTd DataLabel="@Localizer["Created"]" @ondblclick="@(() => EditSType(context.SummaryTypeId))">@context.CreateDate.ToShortDateString()</MudTd>
                    <MudTd DataLabel="@Localizer["Tools"]">
                        <MudIconButton Class="py-0" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" Title="@Localizer["EditSummaryType"]" OnClick="() => EditSType(context.SummaryTypeId)" />
                        @if (context.TransactionTypes.Any())
                        {
                            <MudIconButton Class="py-0" Icon="@Icons.Material.Filled.PointOfSale" Color="Color.Primary" Size="Size.Small" Title="@Localizer["ListEntriesForSummaryType"]" OnClick="()=> ListTransactionsSummary(context)" />
                            <MudIconButton Class="py-0" Icon="@Icons.Material.Filled.ShowChart" Color="Color.Primary" Size="Size.Small" Title="@Localizer["SummaryTypeChart"]" OnClick="()=> SummaryTypeChart(context)" />
                        }
                        else if (context.SummaryTypeId > 0)
                        {
                            <DeleteSTypeBtn SummaryType="@context" Size="@Size.Small" Variant="@Variant.Text" />
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
            <MudFab StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" Size="Size.Small" OnClick="AddSummaryType" Title="@Localizer["NewSummaryType"]" Class="z-10" Style="position:absolute;right:20px;top:25px;" />
        </MudItem>
        <MudItem xs="12" md="6" Class="px-1" Style="height:100%;position:relative;" >
            <MudTable Items="@TransactionTypes" T="TransactionType" Hover="true" SortLabel="@Localizer["SortBy"]" AllowUnsorted="true" Elevation="5" Outlined="true" Dense="true">
                <ToolBarContent>
                    <MudText Class="ps-2 py-0" Typo="Typo.h5"><strong>@CurrentSummaryName</strong> @Localizer["EntryTypes"]</MudText>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh Class="py-0"><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<TransactionType, object>(x=>x.Name)">@Localizer["Name"]</MudTableSortLabel></MudTh>
                    <MudTh Class="py-0"><MudTableSortLabel SortBy="new Func<TransactionType, object>(x=>x.CreateDate)">@Localizer["Created"]</MudTableSortLabel></MudTh>
                    <MudTh Class="py-0">@Localizer["Tools"]</MudTh>
                </HeaderContent>
                <NoRecordsContent>
                    <MudText>@Localizer["NoEntryTypesFound"]</MudText>
                </NoRecordsContent>
                <RowTemplate>
                    <MudTd DataLabel="@Localizer["Name"]" @ondblclick="@(() => EditTType(context.TransactionTypeId))">@context.Name</MudTd>
                    <MudTd DataLabel="@Localizer["Created"]" @ondblclick="@(() => EditTType(context.TransactionTypeId))">@context.CreateDate.ToShortDateString()</MudTd>
                    <MudTd DataLabel="@Localizer["Tools"]">
                        <MudIconButton Class="py-0" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" Title="@Localizer["EditEntryType"]" OnClick="()=> EditTType(context.TransactionTypeId)" />
                        <MudIconButton Class="py-0" Icon="@Icons.Material.Filled.PointOfSale" Color="Color.Primary" Size="Size.Small" Title="@Localizer["ListEntriesForEntryType"]" OnClick="()=> ListTransactionsTType(context)" />
                        <MudIconButton Class="py-0" Icon="@Icons.Material.Filled.ShowChart" Color="Color.Primary" Size="Size.Small" Title="@Localizer["EntryTypeChart"]" OnClick="()=> EntryTypeChart(context)" />
                        @if (!context.TransactionsFound && context.TransactionTypeId > -1)
                        {
                            <DeleteTTypeBtn TransactionType="@context" Variant="@Variant.Text" Size="@Size.Small" />
                        }
                    </MudTd>
                </RowTemplate>
            </MudTable>
            <MudFab StartIcon="@Icons.Material.Filled.Add" Color="Color.Success" Size="Size.Small" OnClick="() => AddTType(CurrentSummaryTypeId)" Title="@Localizer["NewEntryType"]" Class="z-10" Style="position:absolute;right:20px;top:25px;" />
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    [Inject] public IDialogService DialogService { get; set; }

    [Inject] internal IBookSettingSvc BookSettingSvc { get; set; }

    [Inject] internal ISummaryTypeRepository Repo { get; set; }

    [Inject] public INotifierSvc NotifierSvc { get; set; }

    [Inject] public NavigationManager NavigationManager { get; set; }

    [Inject] PageParamsSvc PageParamsSvc { get; set; }

    private string BookName { get; set; } = string.Empty;

    public List<SummaryType> SummaryTypes { get; set; } = [];

    public List<TransactionType> TransactionTypes { get; set; } = [];

    private int CurrentSummaryTypeId;

    private string CurrentSummaryName = string.Empty;

    protected async override Task OnInitializedAsync()
    {
        BookName = await BookSettingSvc.GetBookName();

        NotifierSvc.TransactionsChanged += TransactionsChanged;
        NotifierSvc.SummaryTypeDeleted += () => LoadSummaryTypes();
        NotifierSvc.TransactionTypeDeleted += () => LoadSummaryTypes();

        await LoadSummaryTypes();
    }

    public async Task LoadSummaryTypes()
    {
        SummaryTypes = await Repo.GetAllSummaryTypes();
        SummaryChanged(SummaryTypes.First());
    }

    void SummaryChanged(SummaryType summaryType)
    {
        CurrentSummaryTypeId = summaryType.SummaryTypeId;
        CurrentSummaryName = summaryType.Name;
        TransactionTypes = summaryType.TransactionTypes;
        StateHasChanged();
    }

    protected async void ListTransactionsSummary(SummaryType summary)
    {
        PageParamsSvc.Init();
        PageParamsSvc.Mode = 2;
        PageParamsSvc.Name = summary.Name;
        PageParamsSvc.Types = summary.TransactionTypes.Select(s => s.TransactionTypeId).ToList();
        PageParamsSvc.PreviousPage = "/SummaryTypeList";

        NavigationManager.NavigateTo("TransList", false);
    }

    protected async void SummaryTypeChart(SummaryType summary)
    {
        PageParamsSvc.Init();
        PageParamsSvc.Mode = 2;
        PageParamsSvc.Name = summary.Name;
        PageParamsSvc.SummaryTypeId = summary.SummaryTypeId;
        PageParamsSvc.Types = summary.TransactionTypes.Select(s => s.TransactionTypeId).ToList();
        PageParamsSvc.PreviousPage = "/SummaryTypeList";

        NavigationManager.NavigateTo("LineChart", false);
    }

    private async Task AddSummaryType()
    {
        if (!(await DialogService.Show<STypeDialog>("").Result).Canceled) await LoadSummaryTypes();
    }

    private async Task EditSType(int summaryTypeId)
    {
        if (!(await DialogService.Show<STypeDialog>("", new DialogParameters<STypeDialog> { { x => x.SavedSummaryTypeId, summaryTypeId } }).Result).Canceled) await LoadSummaryTypes();
    }

    protected async Task ListTransactionsTType(TransactionType transactionType)
    {
        PageParamsSvc.Init();
        PageParamsSvc.Mode = 3;
        PageParamsSvc.Name = transactionType.Name;
        PageParamsSvc.TransactionTypeId = transactionType.TransactionTypeId;
        PageParamsSvc.PreviousPage = "/SummaryTypeList";

        NavigationManager.NavigateTo("TransList", false);
    }

    protected async void EntryTypeChart(TransactionType transactionType)
    {
        PageParamsSvc.Init();
        PageParamsSvc.Mode = 3;
        PageParamsSvc.Name = transactionType.Name;
        PageParamsSvc.TransactionTypeId = transactionType.TransactionTypeId;
        PageParamsSvc.PreviousPage = "/SummaryTypeList";

        NavigationManager.NavigateTo("LineChart", false);
    }

    private async Task AddTType(int summaryTypeId)
    {
        if (!(await DialogService.Show<TTypeDialog>("", new DialogParameters<TTypeDialog> { { x => x.NewSummaryTypeId, summaryTypeId } }).Result).Canceled) await LoadSummaryTypes();
    }

    protected async Task EditTType(int transactionTypeId)
    {
        if (!(await DialogService.Show<TTypeDialog>("", new DialogParameters<TTypeDialog> { { x => x.SavedTransactionTypeId, transactionTypeId }, }).Result).Canceled) await LoadSummaryTypes();
    }

    private void TransactionsChanged(object? sender, TransactionsChangedEventArgs args)
    {
        // Reload regardless of year
        LoadSummaryTypes();
    }

    public void Dispose()
    {
        NotifierSvc.TransactionsChanged -= TransactionsChanged;
        NotifierSvc.SummaryTypeDeleted -= () => LoadSummaryTypes();
        NotifierSvc.TransactionTypeDeleted -= () => LoadSummaryTypes();
        GC.SuppressFinalize(this);
    }
}
@page "/booksettings"
@implements IDisposable

<PageTitle>@BookName - @Localizer["Settings"]</PageTitle>

<MudTable T="BookSetting" Items="BookSettings" @ref="Table" Elevation="5" Dense="true" Hover="true" 
        IsEditRowSwitchingBlocked="true" CanCancelEdit="true" RowEditCancel="EditCancelled" 
        RowEditPreview="EditPreview" RowEditCommit="Save" CancelEditIcon="@Icons.Material.Filled.Cancel"
        CommitEditIcon="@Icons.Material.Filled.Save" >
    <ToolBarContent>
        <MudGrid Class="align-center">
            <MudItem Class="py-0 px-2">
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Variant="Variant.Text" Color="Color.Success" Size="Size.Large"/>
            </MudItem>
            <MudItem Class="pa-0">
                <MudText Typo="Typo.h5">@Localizer["Settings"]</MudText>
            </MudItem>
            @if (reloadRequired)
            {
                <MudItem Class="py-0 px-2">
                    <MudIconButton Icon="@Icons.Material.Filled.Refresh" Variant="Variant.Filled" Color="Color.Warning" Title="@Localizer["SaveSettings"]" OnClick="Reload" />
                </MudItem>
            }
        </MudGrid>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<BookSetting, object>(x=>x.SettingName)">@Localizer["Name"]</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<BookSetting, object>(x=>x.SettingValue)">@Localizer["Value"]</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="@Localizer["Name"]">@context.SettingName</MudTd>
        <MudTd DataLabel="@Localizer["Value"]">@context.SettingValue</MudTd>
    </RowTemplate>
    <RowEditingTemplate>
        <MudTd DataLabel="@Localizer["Name"]">@context.SettingName</MudTd>
        <MudTd>
            <MudTextField Label="@Localizer["Value"]" @bind-Value="@context.SettingValue" For="@(() => context.SettingValue)" Immediate="true" Validation=@(async (string x) => await validator.ValidateValueAsync(context, "SettingValue")) />
        </MudTd>
    </RowEditingTemplate>
</MudTable>

@code
{
    [Inject] public NavigationManager NavigationManager { get; set; }

    [Inject] internal IBookSettingSvc BookSettingSvc { get; set; }

    [Inject] internal IBookSettingRepository Repo { get; set; }

    string BookName { get; set; } = Constants.BookName;

    List<BookSetting> BookSettings { get; set; }

    MudTable<BookSetting> Table;

    readonly BookSettingValidator validator = new();

    IDisposable? locationChangingRegistration;

    bool reloadRequired = false;

    BookSetting settingBeforeEdit;

    protected async override Task OnInitializedAsync()
    {
        BookName = await BookSettingSvc.GetBookName();
        await BookSettingSvc.EnsureUserAmendableSettingsCreated();
        BookSettings = (await Repo.GetAllBookSettings()).ToList();
        locationChangingRegistration = NavigationManager.RegisterLocationChangingHandler(OnLocationChanging);
    }

    private void EditCancelled(object setting)
    {
        ((BookSetting)setting).BookSettingId = settingBeforeEdit.BookSettingId;
        ((BookSetting)setting).SettingName = settingBeforeEdit.SettingName;
        ((BookSetting)setting).SettingValue = settingBeforeEdit.SettingValue;
        ((BookSetting)setting).UserAmendable = settingBeforeEdit.UserAmendable;
    }

    private void EditPreview(object setting)
    {
        settingBeforeEdit = new()
        {
            BookSettingId = ((BookSetting)setting).BookSettingId,
            SettingName = ((BookSetting)setting).SettingName,
            SettingValue = ((BookSetting)setting).SettingValue,
            UserAmendable = ((BookSetting)setting).UserAmendable,
        };
    }

    async void Save(object setting)
    {
        if (!Table.Validator.IsValid) return;

        await Repo.UpdateBookSetting((BookSetting)setting);

        reloadRequired = true;
        StateHasChanged();
    }

    void Reload()
    {
        reloadRequired = false;
        NavigationManager.NavigateTo("/", true);
    }

    private ValueTask OnLocationChanging(LocationChangingContext context)
    {
        if (reloadRequired) Reload();

        return ValueTask.CompletedTask;
    }

    public void Dispose()
    {
        locationChangingRegistration?.Dispose();

        GC.SuppressFinalize(this);
    }
}
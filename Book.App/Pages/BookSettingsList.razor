@page "/booksettings"

<PageTitle>@BookName - Settings</PageTitle>

<MudPaper Class="pa-2" Elevation="5">
    <MudGrid Class="align-center">
        <MudItem>
            <MudIcon Icon="@Icons.Material.Filled.Settings" Color="Color.Primary" Size="Size.Large" />
        </MudItem>
        <MudItem Class="pa-0">
            <MudText Typo="Typo.h5">Settings</MudText>
        </MudItem>
    </MudGrid>
</MudPaper>

<MudTable Class="mt-2 pa-2" Elevation="5" Items="@BookSettings" Dense="true" Hover="true" CanCancelEdit="true" CommitEditIcon="@Icons.Material.Filled.Save" @bind-SelectedItem="SelectedBookSetting" SortLabel="Sort By" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues" IsEditRowSwitchingBlocked="@BlockSwitch" EditTrigger="TableEditTrigger.EditButton" EditButtonPosition="TableEditButtonPosition.Start" ApplyButtonPosition="TableApplyButtonPosition.Start" RowEditCommit="ItemHasBeenCommitted" AllowUnsorted="false" CancelEditTooltip="Cancel" CommitEditTooltip="Save Setting" >
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<BookSetting, object>(x=>x.SettingName)">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<BookSetting, object>(x=>x.SettingValue)">Value</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Setting Name">@context.SettingName</MudTd>
            <MudTd DataLabel="Setting Value">@context.SettingValue</MudTd>
        </RowTemplate>
        <RowEditingTemplate>
            <style>
                .mud-table-cell:first-of-type .mud-tooltip-root:nth-of-type(1) .mud-svg-icon { fill: slateblue; }
                .mud-table-cell:first-of-type .mud-tooltip-root:nth-of-type(2) .mud-svg-icon { fill: slateblue; }
            </style>
            <MudTd DataLabel="Setting Name">@context.SettingName</MudTd>
            <MudTd DataLabel="Setting Value">
                <MudTextField @bind-Value="@context.SettingValue" Required Variant="Variant.Outlined" Margin="Margin.Dense" />
            </MudTd>
        </RowEditingTemplate>
     <EditButtonContent Context="button">
         <MudTooltip Text="Edit Setting" Delay="500" Duration="0" ShowOnFocus="false" >
            <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Filled.Edit" Class="pa-0" OnClick="@button.ButtonAction" Color="Color.Primary" />
        </MudTooltip>
     </EditButtonContent>
 </MudTable>

@code
{
    [Inject] public IDialogService DialogService { get; set; }

    [Inject] public NavigationManager NavigationManager { get; set; }

    [Inject] internal IBookSettingSvc BookSettingSvc { get; set; }

    [Inject] internal IBookSettingRepository Repo { get; set; }

    private string BookName { get; set; } = Constants.BookName;

    public List<BookSetting> BookSettings { get; set; }

    private BookSetting SelectedBookSetting { get; set; }

    private BookSetting BookSettingBeforeEdit { get; set; }

    private bool BlockSwitch { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        BookName = await BookSettingSvc.GetBookName();
        BookSettings = (await Repo.GetAllBookSettings()).ToList();
    }

    private void BackupItem(object bookSetting)
    {
        BookSettingBeforeEdit = new()
            {
                BookSettingId = ((BookSetting)bookSetting).BookSettingId,
                SettingName = ((BookSetting)bookSetting).SettingName,
                UserAmendable = ((BookSetting)bookSetting).UserAmendable,
                SettingValue = ((BookSetting)bookSetting).SettingValue
            };
    }

    private void ResetItemToOriginalValues(object bookSetting)
    {
        ((BookSetting)bookSetting).BookSettingId = BookSettingBeforeEdit.BookSettingId;
        ((BookSetting)bookSetting).SettingName = BookSettingBeforeEdit.SettingName;
        ((BookSetting)bookSetting).UserAmendable = BookSettingBeforeEdit.UserAmendable;
        ((BookSetting)bookSetting).SettingValue = BookSettingBeforeEdit.SettingValue;

        BlockSwitch = false;
        StateHasChanged();
    }

    private async void ItemHasBeenCommitted(object bookSetting)
    {
        await Repo.UpdateBookSettings(BookSettings);
        NavigationManager.NavigateTo("/", true);
    }
}
